ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"UART_I2C_INT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.UART_I2C_ISR,"ax",%progbits
  18              		.align	2
  19              		.global	UART_I2C_ISR
  20              		.code	16
  21              		.thumb_func
  22              		.type	UART_I2C_ISR, %function
  23              	UART_I2C_ISR:
  24              	.LFB2:
  25              		.file 1 ".\\Generated_Source\\PSoC4\\UART_I2C_INT.c"
   1:.\Generated_Source\PSoC4/UART_I2C_INT.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/UART_I2C_INT.c **** * File Name: UART_I2C_INT.c
   3:.\Generated_Source\PSoC4/UART_I2C_INT.c **** * Version 3.0
   4:.\Generated_Source\PSoC4/UART_I2C_INT.c **** *
   5:.\Generated_Source\PSoC4/UART_I2C_INT.c **** * Description:
   6:.\Generated_Source\PSoC4/UART_I2C_INT.c **** *  This file provides the source code to the Interrupt Service Routine for
   7:.\Generated_Source\PSoC4/UART_I2C_INT.c **** *  the SCB Component in I2C mode.
   8:.\Generated_Source\PSoC4/UART_I2C_INT.c **** *
   9:.\Generated_Source\PSoC4/UART_I2C_INT.c **** * Note:
  10:.\Generated_Source\PSoC4/UART_I2C_INT.c **** *
  11:.\Generated_Source\PSoC4/UART_I2C_INT.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/UART_I2C_INT.c **** * Copyright 2013-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/UART_I2C_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/UART_I2C_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/UART_I2C_INT.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/UART_I2C_INT.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
  18:.\Generated_Source\PSoC4/UART_I2C_INT.c **** #include "UART_PVT.h"
  19:.\Generated_Source\PSoC4/UART_I2C_INT.c **** #include "UART_I2C_PVT.h"
  20:.\Generated_Source\PSoC4/UART_I2C_INT.c **** #include "cyapicallbacks.h"
  21:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
  22:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
  23:.\Generated_Source\PSoC4/UART_I2C_INT.c **** /*******************************************************************************
  24:.\Generated_Source\PSoC4/UART_I2C_INT.c **** * Function Name: UART_I2C_ISR
  25:.\Generated_Source\PSoC4/UART_I2C_INT.c **** ********************************************************************************
  26:.\Generated_Source\PSoC4/UART_I2C_INT.c **** *
  27:.\Generated_Source\PSoC4/UART_I2C_INT.c **** * Summary:
  28:.\Generated_Source\PSoC4/UART_I2C_INT.c **** *  Handles the Interrupt Service Routine for the SCB I2C mode.
  29:.\Generated_Source\PSoC4/UART_I2C_INT.c **** *
  30:.\Generated_Source\PSoC4/UART_I2C_INT.c **** * Parameters:
  31:.\Generated_Source\PSoC4/UART_I2C_INT.c **** *  None
  32:.\Generated_Source\PSoC4/UART_I2C_INT.c **** *
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 2


  33:.\Generated_Source\PSoC4/UART_I2C_INT.c **** * Return:
  34:.\Generated_Source\PSoC4/UART_I2C_INT.c **** *  None
  35:.\Generated_Source\PSoC4/UART_I2C_INT.c **** *
  36:.\Generated_Source\PSoC4/UART_I2C_INT.c **** *******************************************************************************/
  37:.\Generated_Source\PSoC4/UART_I2C_INT.c **** CY_ISR(UART_I2C_ISR)
  38:.\Generated_Source\PSoC4/UART_I2C_INT.c **** {
  26              		.loc 1 38 0
  27              		.cfi_startproc
  28 0000 10B5     		push	{r4, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 4, -8
  31              		.cfi_offset 14, -4
  32              	.LVL0:
  39:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     uint32 diffCount;
  40:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     uint32 endTransfer;
  41:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
  42:.\Generated_Source\PSoC4/UART_I2C_INT.c **** #ifdef UART_I2C_ISR_ENTRY_CALLBACK
  43:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     UART_I2C_ISR_EntryCallback();
  44:.\Generated_Source\PSoC4/UART_I2C_INT.c **** #endif /* UART_I2C_ISR_ENTRY_CALLBACK */
  45:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     
  46:.\Generated_Source\PSoC4/UART_I2C_INT.c **** #if (UART_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
  47:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     uint32 response;
  48:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
  49:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     response = UART_I2C_ACK_ADDR;
  50:.\Generated_Source\PSoC4/UART_I2C_INT.c **** #endif /* (UART_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
  51:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
  52:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     endTransfer = 0u; /* Continue active transfer */
  53:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
  54:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     /* Calls customer routine if registered */
  55:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     if(NULL != UART_customIntrHandler)
  33              		.loc 1 55 0
  34 0002 C64B     		ldr	r3, .L112
  35 0004 1B68     		ldr	r3, [r3]
  36 0006 002B     		cmp	r3, #0
  37 0008 00D0     		beq	.L2
  56:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     {
  57:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         UART_customIntrHandler();
  38              		.loc 1 57 0
  39 000a 9847     		blx	r3
  40              	.LVL1:
  41              	.L2:
  58:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     }
  59:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
  60:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     if(UART_CHECK_INTR_I2C_EC_MASKED(UART_INTR_I2C_EC_WAKE_UP))
  42              		.loc 1 60 0
  43 000c C44B     		ldr	r3, .L112+4
  44 000e 1B68     		ldr	r3, [r3]
  45 0010 DB07     		lsl	r3, r3, #31
  46 0012 02D5     		bpl	.L3
  61:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     {
  62:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         /* Mask-off after wakeup */
  63:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         UART_SetI2CExtClkInterruptMode(UART_NO_INTR_SOURCES);
  47              		.loc 1 63 0
  48 0014 0022     		mov	r2, #0
  49 0016 C34B     		ldr	r3, .L112+8
  50 0018 1A60     		str	r2, [r3]
  51              	.L3:
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 3


  64:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     }
  65:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
  66:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     /* Master and Slave error tracking:
  67:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     * Add the master state check to track only the master errors when the master is active or
  68:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     * track slave errors when the slave is active or idle.
  69:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     * A special MMS case: in the address phase with misplaced Start: the master sets the LOST_ARB a
  70:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     * slave BUS_ERR. The valid event is LOST_ARB comes from the master.
  71:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     */
  72:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     if(UART_CHECK_I2C_FSM_MASTER)
  52              		.loc 1 72 0
  53 001a C34B     		ldr	r3, .L112+12
  54 001c 1B78     		ldrb	r3, [r3]
  55 001e 9B06     		lsl	r3, r3, #26
  56 0020 7BD5     		bpl	.L4
  73:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     {
  74:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         if(UART_I2C_MASTER)
  57              		.loc 1 74 0
  58 0022 C24B     		ldr	r3, .L112+16
  59 0024 1B78     		ldrb	r3, [r3]
  60 0026 9A07     		lsl	r2, r3, #30
  61 0028 00D4     		bmi	.LCB43
  62 002a 9BE0     		b	.L88	@long jump
  63              	.LCB43:
  75:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         {
  76:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             /* INTR_MASTER_I2C_BUS_ERROR:
  77:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * A misplaced Start or Stop condition occurred on the bus: complete the transaction.
  78:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * The interrupt is cleared in I2C_FSM_EXIT_IDLE.
  79:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             */
  80:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             if(UART_CHECK_INTR_MASTER_MASKED(UART_INTR_MASTER_I2C_BUS_ERROR))
  64              		.loc 1 80 0
  65 002c C04A     		ldr	r2, .L112+20
  66 002e 1268     		ldr	r2, [r2]
  67 0030 D205     		lsl	r2, r2, #23
  68 0032 07D5     		bpl	.L89
  81:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             {
  82:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_mstrStatus |= (uint16) (UART_I2C_MSTAT_ERR_XFER |
  69              		.loc 1 82 0
  70 0034 BF49     		ldr	r1, .L112+24
  71 0036 0888     		ldrh	r0, [r1]
  72 0038 C022     		mov	r2, #192
  73 003a 9200     		lsl	r2, r2, #2
  74 003c 0243     		orr	r2, r0
  75 003e 0A80     		strh	r2, [r1]
  76              	.LVL2:
  83:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                          UART_I2C_MSTAT_ERR_BUS_ERROR);
  84:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
  85:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 endTransfer = UART_I2C_CMPLT_ANY_TRANSFER;
  77              		.loc 1 85 0
  78 0040 0122     		mov	r2, #1
  79 0042 00E0     		b	.L6
  80              	.LVL3:
  81              	.L89:
  52:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
  82              		.loc 1 52 0
  83 0044 0022     		mov	r2, #0
  84              	.LVL4:
  85              	.L6:
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 4


  86:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             }
  87:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
  88:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             /* INTR_MASTER_I2C_ARB_LOST:
  89:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * The MultiMaster lost arbitrage during transaction.
  90:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * A Misplaced Start or Stop condition is treated as lost arbitration when the master dr
  91:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * The interrupt source is cleared in I2C_FSM_EXIT_IDLE.
  92:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             */
  93:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             if(UART_CHECK_INTR_MASTER_MASKED(UART_INTR_MASTER_I2C_ARB_LOST))
  86              		.loc 1 93 0
  87 0046 BA49     		ldr	r1, .L112+20
  88 0048 0968     		ldr	r1, [r1]
  89 004a C907     		lsl	r1, r1, #31
  90 004c 06D5     		bpl	.L7
  94:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             {
  95:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_mstrStatus |= (uint16) (UART_I2C_MSTAT_ERR_XFER |
  91              		.loc 1 95 0
  92 004e B949     		ldr	r1, .L112+24
  93 0050 0888     		ldrh	r0, [r1]
  94 0052 9022     		mov	r2, #144
  95              	.LVL5:
  96 0054 9200     		lsl	r2, r2, #2
  97 0056 0243     		orr	r2, r0
  98 0058 0A80     		strh	r2, [r1]
  99              	.LVL6:
  96:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                          UART_I2C_MSTAT_ERR_ARB_LOST);
  97:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
  98:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 endTransfer = UART_I2C_CMPLT_ANY_TRANSFER;
 100              		.loc 1 98 0
 101 005a 0122     		mov	r2, #1
 102              	.LVL7:
 103              	.L7:
  99:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             }
 100:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 101:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             if(UART_I2C_MULTI_MASTER_SLAVE)
 104              		.loc 1 101 0
 105 005c 072B     		cmp	r3, #7
 106 005e 0AD1     		bne	.L8
 102:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             {
 103:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 /* I2C_MASTER_CMD_M_START_ON_IDLE:
 104:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 * MultiMaster-Slave does not generate start, because Slave was addressed.
 105:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 * Pass control to slave.
 106:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 */
 107:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 if(UART_CHECK_I2C_MASTER_CMD(UART_I2C_MASTER_CMD_M_START_ON_IDLE))
 107              		.loc 1 107 0
 108 0060 B549     		ldr	r1, .L112+28
 109 0062 0968     		ldr	r1, [r1]
 110 0064 8907     		lsl	r1, r1, #30
 111 0066 06D5     		bpl	.L8
 108:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 109:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_mstrStatus |= (uint16) (UART_I2C_MSTAT_ERR_XFER |
 112              		.loc 1 109 0
 113 0068 B249     		ldr	r1, .L112+24
 114 006a 0888     		ldrh	r0, [r1]
 115 006c A022     		mov	r2, #160
 116              	.LVL8:
 117 006e 9200     		lsl	r2, r2, #2
 118 0070 0243     		orr	r2, r0
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 5


 119 0072 0A80     		strh	r2, [r1]
 120              	.LVL9:
 110:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                              UART_I2C_MSTAT_ERR_ABORT_XFER);
 111:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 112:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     endTransfer = UART_I2C_CMPLT_ANY_TRANSFER;
 121              		.loc 1 112 0
 122 0074 0122     		mov	r2, #1
 123              	.LVL10:
 124              	.L8:
 113:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 114:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             }
 115:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             
 116:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 117:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             /* The error handling common part:
 118:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * Sets a completion flag of the master transaction and passes control to:
 119:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             *  - I2C_FSM_EXIT_IDLE - to complete transaction in case of: ARB_LOST or BUS_ERR.
 120:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             *  - I2C_FSM_IDLE      - to take chance for the slave to process incoming transaction.
 121:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             */
 122:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             if(0u != endTransfer)
 125              		.loc 1 122 0
 126 0076 002A     		cmp	r2, #0
 127 0078 79D0     		beq	.L5
 123:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             {
 124:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 /* Set completion flags for master */
 125:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_mstrStatus |= (uint16) UART_GET_I2C_MSTAT_CMPLT;
 128              		.loc 1 125 0
 129 007a AB49     		ldr	r1, .L112+12
 130 007c 0978     		ldrb	r1, [r1]
 131 007e C907     		lsl	r1, r1, #31
 132 0080 01D5     		bpl	.L90
 133 0082 0121     		mov	r1, #1
 134 0084 00E0     		b	.L9
 135              	.L90:
 136 0086 0221     		mov	r1, #2
 137              	.L9:
 138              		.loc 1 125 0 is_stmt 0 discriminator 4
 139 0088 AA48     		ldr	r0, .L112+24
 140 008a 0488     		ldrh	r4, [r0]
 141 008c 2143     		orr	r1, r4
 142 008e 0180     		strh	r1, [r0]
 126:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 127:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 if(UART_I2C_MULTI_MASTER_SLAVE)
 143              		.loc 1 127 0 is_stmt 1 discriminator 4
 144 0090 072B     		cmp	r3, #7
 145 0092 3ED1     		bne	.L10
 128:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 129:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     if(UART_CHECK_I2C_FSM_ADDR)
 146              		.loc 1 129 0
 147 0094 A44B     		ldr	r3, .L112+12
 148 0096 1B78     		ldrb	r3, [r3]
 149 0098 1B07     		lsl	r3, r3, #28
 150 009a 36D5     		bpl	.L11
 130:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     {
 131:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* Start generation is set after another master starts accessing Slave.
 132:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * Clean-up master and turn to slave. Set state to IDLE.
 133:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         */
 134:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         if(UART_CHECK_I2C_MASTER_CMD(UART_I2C_MASTER_CMD_M_START_ON_IDLE))
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 6


 151              		.loc 1 134 0
 152 009c A64B     		ldr	r3, .L112+28
 153 009e 1B68     		ldr	r3, [r3]
 154 00a0 9B07     		lsl	r3, r3, #30
 155 00a2 04D5     		bpl	.L12
 135:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 136:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_I2C_MASTER_CLEAR_START;
 156              		.loc 1 136 0
 157 00a4 0022     		mov	r2, #0
 158              	.LVL11:
 159 00a6 A44B     		ldr	r3, .L112+28
 160 00a8 1A60     		str	r2, [r3]
 161              	.LVL12:
 137:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 138:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             endTransfer = UART_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave */
 162              		.loc 1 138 0
 163 00aa 0132     		add	r2, r2, #1
 164 00ac 0CE0     		b	.L13
 165              	.LVL13:
 166              	.L12:
 139:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 140:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* Valid arbitration lost on the address phase happens only when: master LO
 141:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * slave BUS_ERR is cleared. Only in that case set the state to IDLE without
 142:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         */
 143:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         else if((!UART_CHECK_INTR_SLAVE_MASKED(UART_INTR_SLAVE_I2C_BUS_ERROR))
 167              		.loc 1 143 0
 168 00ae A34B     		ldr	r3, .L112+32
 169 00b0 1B68     		ldr	r3, [r3]
 170 00b2 DB05     		lsl	r3, r3, #23
 171 00b4 05D4     		bmi	.L91
 144:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                && UART_CHECK_INTR_MASTER_MASKED(UART_INTR_MASTER_I2C_ARB_LOST))
 172              		.loc 1 144 0
 173 00b6 9E4B     		ldr	r3, .L112+20
 174 00b8 1B68     		ldr	r3, [r3]
 175 00ba DB07     		lsl	r3, r3, #31
 176 00bc 03D4     		bmi	.L92
 145:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 146:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             endTransfer = UART_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave */
 147:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 148:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         else
 149:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 150:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             endTransfer = 0u; /* Causes I2C_FSM_EXIT_IDLE to be set below */
 177              		.loc 1 150 0
 178 00be 0022     		mov	r2, #0
 179              	.LVL14:
 180 00c0 02E0     		b	.L13
 181              	.LVL15:
 182              	.L91:
 183 00c2 0022     		mov	r2, #0
 184              	.LVL16:
 185 00c4 00E0     		b	.L13
 186              	.LVL17:
 187              	.L92:
 146:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 188              		.loc 1 146 0
 189 00c6 0122     		mov	r2, #1
 190              	.LVL18:
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 7


 191              	.L13:
 151:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 152:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 153:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         if(0u != endTransfer) /* Clean-up master to proceed with slave */
 192              		.loc 1 153 0
 193 00c8 002A     		cmp	r2, #0
 194 00ca 1AD0     		beq	.L14
 154:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 155:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_CLEAR_TX_FIFO; /* Shifter keeps address, clear it */
 195              		.loc 1 155 0
 196 00cc 9C4B     		ldr	r3, .L112+36
 197 00ce 1968     		ldr	r1, [r3]
 198 00d0 8020     		mov	r0, #128
 199 00d2 4002     		lsl	r0, r0, #9
 200 00d4 0143     		orr	r1, r0
 201 00d6 1960     		str	r1, [r3]
 202 00d8 1868     		ldr	r0, [r3]
 203 00da 9A49     		ldr	r1, .L112+40
 204 00dc 0140     		and	r1, r0
 205 00de 1960     		str	r1, [r3]
 156:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 157:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_DISABLE_MASTER_AUTO_DATA_ACK; /* In case of reading disable autoAC
 206              		.loc 1 157 0
 207 00e0 9949     		ldr	r1, .L112+44
 208 00e2 0868     		ldr	r0, [r1]
 209 00e4 994B     		ldr	r3, .L112+48
 210 00e6 0340     		and	r3, r0
 211 00e8 0B60     		str	r3, [r1]
 158:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 159:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             /* Clean-up master interrupt sources */
 160:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_ClearMasterInterruptSource(UART_INTR_MASTER_ALL);
 212              		.loc 1 160 0
 213 00ea 9949     		ldr	r1, .L112+52
 214 00ec 994B     		ldr	r3, .L112+56
 215 00ee 1960     		str	r1, [r3]
 161:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 162:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             /* Disable data processing interrupts: they have to be cleared before *
 163:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_SetRxInterruptMode(UART_NO_INTR_SOURCES);
 216              		.loc 1 163 0
 217 00f0 0023     		mov	r3, #0
 218 00f2 9949     		ldr	r1, .L112+60
 219 00f4 0B60     		str	r3, [r1]
 164:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_SetTxInterruptMode(UART_NO_INTR_SOURCES);
 220              		.loc 1 164 0
 221 00f6 9949     		ldr	r1, .L112+64
 222 00f8 0B60     		str	r3, [r1]
 165:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 166:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_state = UART_I2C_FSM_IDLE;
 223              		.loc 1 166 0
 224 00fa 1021     		mov	r1, #16
 225 00fc 8A4B     		ldr	r3, .L112+12
 226 00fe 1970     		strb	r1, [r3]
 227 0100 35E0     		b	.L5
 228              	.L14:
 167:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 168:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         else
 169:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 8


 170:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             /* Set I2C_FSM_EXIT_IDLE for BUS_ERR and ARB_LOST (that is really bus e
 171:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_state = UART_I2C_FSM_EXIT_IDLE;
 229              		.loc 1 171 0
 230 0102 0021     		mov	r1, #0
 231 0104 884B     		ldr	r3, .L112+12
 232 0106 1970     		strb	r1, [r3]
 233 0108 31E0     		b	.L5
 234              	.L11:
 172:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 173:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     }
 174:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     else
 175:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     {
 176:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* Set I2C_FSM_EXIT_IDLE if any other state than address */
 177:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_state = UART_I2C_FSM_EXIT_IDLE;
 235              		.loc 1 177 0
 236 010a 0021     		mov	r1, #0
 237 010c 864B     		ldr	r3, .L112+12
 238 010e 1970     		strb	r1, [r3]
 239 0110 2DE0     		b	.L5
 240              	.L10:
 178:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     }
 179:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 180:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 else
 181:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 182:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* In case of LOST*/
 183:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_state = UART_I2C_FSM_EXIT_IDLE;
 241              		.loc 1 183 0
 242 0112 0021     		mov	r1, #0
 243 0114 844B     		ldr	r3, .L112+12
 244 0116 1970     		strb	r1, [r3]
 245 0118 29E0     		b	.L5
 246              	.LVL19:
 247              	.L4:
 184:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 185:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 
 186:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             }
 187:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         }
 188:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         
 189:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     }
 190:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     else /* (UART_CHECK_I2C_FSM_SLAVE) */
 191:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     {
 192:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         if(UART_I2C_SLAVE)
 248              		.loc 1 192 0
 249 011a 844B     		ldr	r3, .L112+16
 250 011c 1B78     		ldrb	r3, [r3]
 251 011e DB07     		lsl	r3, r3, #31
 252 0120 22D5     		bpl	.L93
 193:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         {
 194:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             /* INTR_SLAVE_I2C_BUS_ERROR or UART_INTR_SLAVE_I2C_ARB_LOST:
 195:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * A Misplaced Start or Stop condition occurred on the bus: set a flag
 196:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * to notify an error condition.
 197:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             */
 198:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             if(UART_CHECK_INTR_SLAVE_MASKED(UART_INTR_SLAVE_I2C_BUS_ERROR |
 253              		.loc 1 198 0
 254 0122 864B     		ldr	r3, .L112+32
 255 0124 1A68     		ldr	r2, [r3]
 256 0126 0223     		mov	r3, #2
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 9


 257 0128 FF33     		add	r3, r3, #255
 258 012a 1A42     		tst	r2, r3
 259 012c 1ED0     		beq	.L94
 199:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                         UART_INTR_SLAVE_I2C_ARB_LOST))
 200:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             {
 201:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 if(UART_CHECK_I2C_FSM_RD)
 260              		.loc 1 201 0
 261 012e 7E4B     		ldr	r3, .L112+12
 262 0130 1B78     		ldrb	r3, [r3]
 263 0132 DB07     		lsl	r3, r3, #31
 264 0134 09D5     		bpl	.L15
 202:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 203:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* TX direction: master reads from slave */
 204:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_slStatus &= (uint8) ~UART_I2C_SSTAT_RD_BUSY;
 265              		.loc 1 204 0
 266 0136 8A4B     		ldr	r3, .L112+68
 267 0138 1A78     		ldrb	r2, [r3]
 268 013a 0221     		mov	r1, #2
 269 013c 8A43     		bic	r2, r1
 270 013e 1A70     		strb	r2, [r3]
 205:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_slStatus |= (uint8) (UART_I2C_SSTAT_RD_ERR |
 271              		.loc 1 205 0
 272 0140 1978     		ldrb	r1, [r3]
 273 0142 0922     		mov	r2, #9
 274 0144 0A43     		orr	r2, r1
 275 0146 1A70     		strb	r2, [r3]
 276 0148 08E0     		b	.L16
 277              	.L15:
 206:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                           UART_I2C_SSTAT_RD_CMPLT);
 207:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 208:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 else
 209:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 210:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* RX direction: master writes into slave */
 211:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_slStatus &= (uint8) ~UART_I2C_SSTAT_WR_BUSY;
 278              		.loc 1 211 0
 279 014a 854B     		ldr	r3, .L112+68
 280 014c 1A78     		ldrb	r2, [r3]
 281 014e 2021     		mov	r1, #32
 282 0150 8A43     		bic	r2, r1
 283 0152 1A70     		strb	r2, [r3]
 212:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_slStatus |= (uint8) (UART_I2C_SSTAT_WR_ERR |
 284              		.loc 1 212 0
 285 0154 1978     		ldrb	r1, [r3]
 286 0156 9022     		mov	r2, #144
 287 0158 0A43     		orr	r2, r1
 288 015a 1A70     		strb	r2, [r3]
 289              	.L16:
 213:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                           UART_I2C_SSTAT_WR_CMPLT);
 214:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 215:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 216:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_state = UART_I2C_FSM_EXIT_IDLE;
 290              		.loc 1 216 0
 291 015c 0022     		mov	r2, #0
 292 015e 724B     		ldr	r3, .L112+12
 293 0160 1A70     		strb	r2, [r3]
 294 0162 04E0     		b	.L5
 295              	.L88:
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 10


  52:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 296              		.loc 1 52 0
 297 0164 0022     		mov	r2, #0
 298 0166 02E0     		b	.L5
 299              	.L93:
 300 0168 0022     		mov	r2, #0
 301 016a 00E0     		b	.L5
 302              	.L94:
 303 016c 0022     		mov	r2, #0
 304              	.LVL20:
 305              	.L5:
 217:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             }
 218:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         }
 219:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         
 220:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     }
 221:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 222:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     /* States description:
 223:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     * Any Master operation starts from: the ADDR_RD/WR state as the master generates traffic on the
 224:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     * Any Slave operation starts from: the IDLE state as the slave always waits for actions from th
 225:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     */
 226:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 227:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     /* FSM Master */
 228:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     if(UART_CHECK_I2C_FSM_MASTER)
 306              		.loc 1 228 0
 307 016e 6E4B     		ldr	r3, .L112+12
 308 0170 1B78     		ldrb	r3, [r3]
 309 0172 9B06     		lsl	r3, r3, #26
 310 0174 00D4     		bmi	.LCB335
 311 0176 76E1     		b	.L17	@long jump
 312              	.LCB335:
 229:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     {
 230:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         if(UART_I2C_MASTER)
 313              		.loc 1 230 0
 314 0178 6C4B     		ldr	r3, .L112+16
 315 017a 1B78     		ldrb	r3, [r3]
 316 017c 9B07     		lsl	r3, r3, #30
 317 017e 00D4     		bmi	.LCB342
 318 0180 98E3     		b	.L1	@long jump
 319              	.LCB342:
 231:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         {
 232:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             /* INTR_MASTER_I2C_STOP:
 233:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * A Stop condition was generated by the master: the end of the transaction.
 234:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * Set completion flags to notify the API.
 235:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             */
 236:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             if(UART_CHECK_INTR_MASTER_MASKED(UART_INTR_MASTER_I2C_STOP))
 320              		.loc 1 236 0
 321 0182 6B4B     		ldr	r3, .L112+20
 322 0184 1B68     		ldr	r3, [r3]
 323 0186 DB06     		lsl	r3, r3, #27
 324 0188 11D5     		bpl	.L19
 237:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             {
 238:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_ClearMasterInterruptSource(UART_INTR_MASTER_I2C_STOP);
 325              		.loc 1 238 0
 326 018a 1022     		mov	r2, #16
 327              	.LVL21:
 328 018c 714B     		ldr	r3, .L112+56
 329 018e 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 11


 239:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 240:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_mstrStatus |= (uint16) UART_GET_I2C_MSTAT_CMPLT;
 330              		.loc 1 240 0
 331 0190 654B     		ldr	r3, .L112+12
 332 0192 1B78     		ldrb	r3, [r3]
 333 0194 DB07     		lsl	r3, r3, #31
 334 0196 01D5     		bpl	.L95
 335 0198 0123     		mov	r3, #1
 336 019a 00E0     		b	.L20
 337              	.L95:
 338 019c 0223     		mov	r3, #2
 339              	.L20:
 340              		.loc 1 240 0 is_stmt 0 discriminator 4
 341 019e 654A     		ldr	r2, .L112+24
 342 01a0 1188     		ldrh	r1, [r2]
 343 01a2 0B43     		orr	r3, r1
 344 01a4 1380     		strh	r3, [r2]
 241:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_state       = UART_I2C_FSM_IDLE;
 345              		.loc 1 241 0 is_stmt 1 discriminator 4
 346 01a6 1022     		mov	r2, #16
 347 01a8 5F4B     		ldr	r3, .L112+12
 348 01aa 1A70     		strb	r2, [r3]
 349 01ac 82E3     		b	.L1
 350              	.LVL22:
 351              	.L19:
 242:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             }
 243:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             else
 244:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             {
 245:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 if(UART_CHECK_I2C_FSM_ADDR) /* Address stage */
 352              		.loc 1 245 0
 353 01ae 5E4B     		ldr	r3, .L112+12
 354 01b0 1B78     		ldrb	r3, [r3]
 355 01b2 1B07     		lsl	r3, r3, #28
 356 01b4 20D5     		bpl	.L21
 246:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 247:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* INTR_MASTER_I2C_NACK:
 248:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     * The master sent an address but it was NACKed by the slave. Complete transacti
 249:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     */
 250:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     if(UART_CHECK_INTR_MASTER_MASKED(UART_INTR_MASTER_I2C_NACK))
 357              		.loc 1 250 0
 358 01b6 5E4B     		ldr	r3, .L112+20
 359 01b8 1B68     		ldr	r3, [r3]
 360 01ba 9B07     		lsl	r3, r3, #30
 361 01bc 0AD5     		bpl	.L22
 251:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     {
 252:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_ClearMasterInterruptSource(UART_INTR_MASTER_I2C_NACK);
 362              		.loc 1 252 0
 363 01be 0222     		mov	r2, #2
 364              	.LVL23:
 365 01c0 644B     		ldr	r3, .L112+56
 366 01c2 1A60     		str	r2, [r3]
 253:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 254:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_mstrStatus |= (uint16) (UART_I2C_MSTAT_ERR_XFER |
 367              		.loc 1 254 0
 368 01c4 5B4A     		ldr	r2, .L112+24
 369 01c6 1188     		ldrh	r1, [r2]
 370 01c8 8823     		mov	r3, #136
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 12


 371 01ca 9B00     		lsl	r3, r3, #2
 372 01cc 0B43     		orr	r3, r1
 373 01ce 1380     		strh	r3, [r2]
 374              	.LVL24:
 255:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                                  UART_I2C_MSTAT_ERR_ADDR_NAK);
 256:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 257:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         endTransfer = UART_I2C_CMPLT_ANY_TRANSFER;
 375              		.loc 1 257 0
 376 01d0 0122     		mov	r2, #1
 377 01d2 11E0     		b	.L21
 378              	.LVL25:
 379              	.L22:
 258:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     }
 259:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* INTR_TX_UNDERFLOW. The master sent an address:
 260:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     *  - TX direction: the clock is stretched after the ACK phase, because the TX F
 261:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     *    EMPTY. The TX EMPTY cleans all the TX interrupt sources.
 262:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     *  - RX direction: the 1st byte is received, but there is no ACK permission,
 263:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     *    the clock is stretched after 1 byte is received.
 264:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     */
 265:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     else
 266:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     {
 267:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         if(UART_CHECK_I2C_FSM_RD) /* Reading */
 380              		.loc 1 267 0
 381 01d4 544B     		ldr	r3, .L112+12
 382 01d6 1B78     		ldrb	r3, [r3]
 383 01d8 DB07     		lsl	r3, r3, #31
 384 01da 03D5     		bpl	.L23
 268:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 269:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_state = UART_I2C_FSM_MSTR_RD_DATA;
 385              		.loc 1 269 0
 386 01dc 2521     		mov	r1, #37
 387 01de 524B     		ldr	r3, .L112+12
 388 01e0 1970     		strb	r1, [r3]
 389 01e2 09E0     		b	.L21
 390              	.L23:
 270:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 271:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         else /* Writing */
 272:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 273:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_state = UART_I2C_FSM_MSTR_WR_DATA;
 391              		.loc 1 273 0
 392 01e4 2421     		mov	r1, #36
 393 01e6 504B     		ldr	r3, .L112+12
 394 01e8 1970     		strb	r1, [r3]
 274:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             if(0u != UART_mstrWrBufSize)
 395              		.loc 1 274 0
 396 01ea 5E4B     		ldr	r3, .L112+72
 397 01ec 1B68     		ldr	r3, [r3]
 398 01ee 002B     		cmp	r3, #0
 399 01f0 02D0     		beq	.L21
 275:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 276:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 /* Enable INTR.TX_EMPTY if there is data to transmit */
 277:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 UART_SetTxInterruptMode(UART_INTR_TX_EMPTY);
 400              		.loc 1 277 0
 401 01f2 1439     		sub	r1, r1, #20
 402 01f4 594B     		ldr	r3, .L112+64
 403 01f6 1960     		str	r1, [r3]
 404              	.LVL26:
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 13


 405              	.L21:
 278:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             }
 279:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 280:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     }
 281:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 282:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 283:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 if(UART_CHECK_I2C_FSM_DATA) /* Data phase */
 406              		.loc 1 283 0
 407 01f8 4B4B     		ldr	r3, .L112+12
 408 01fa 1B78     		ldrb	r3, [r3]
 409 01fc 5B07     		lsl	r3, r3, #29
 410 01fe 00D4     		bmi	.LCB452
 411 0200 07E1     		b	.L24	@long jump
 412              	.LCB452:
 284:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 285:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     if(UART_CHECK_I2C_FSM_RD) /* Reading */
 413              		.loc 1 285 0
 414 0202 494B     		ldr	r3, .L112+12
 415 0204 1B78     		ldrb	r3, [r3]
 416 0206 DB07     		lsl	r3, r3, #31
 417 0208 5CD5     		bpl	.L25
 286:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     {
 287:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* INTR_RX_FULL:
 288:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * RX direction: the master received 8 bytes.
 289:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * Get data from RX FIFO and decide whether to ACK or  NACK the following by
 290:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         */
 291:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         if(UART_CHECK_INTR_RX_MASKED(UART_INTR_RX_FULL))
 418              		.loc 1 291 0
 419 020a 574B     		ldr	r3, .L112+76
 420 020c 1B68     		ldr	r3, [r3]
 421 020e 1B07     		lsl	r3, r3, #28
 422 0210 3AD5     		bpl	.L26
 292:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 293:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             /* Calculate difference */
 294:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             diffCount =  UART_mstrRdBufSize -
 423              		.loc 1 294 0
 424 0212 564B     		ldr	r3, .L112+80
 425 0214 1868     		ldr	r0, [r3]
 295:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                         (UART_mstrRdBufIndex + UART_GET_RX_FIFO_ENTRIES);
 426              		.loc 1 295 0
 427 0216 564B     		ldr	r3, .L112+84
 428 0218 1B68     		ldr	r3, [r3]
 429 021a 1F24     		mov	r4, #31
 430 021c 2340     		and	r3, r4
 431 021e 5549     		ldr	r1, .L112+88
 432 0220 0968     		ldr	r1, [r1]
 433 0222 5B18     		add	r3, r3, r1
 294:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                         (UART_mstrRdBufIndex + UART_GET_RX_FIFO_ENTRIES);
 434              		.loc 1 294 0
 435 0224 C41A     		sub	r4, r0, r3
 436              	.LVL27:
 296:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 297:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             /* Proceed transaction or end it when RX FIFO becomes FULL again */
 298:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             if(diffCount > UART_I2C_FIFO_SIZE)
 437              		.loc 1 298 0
 438 0226 544B     		ldr	r3, .L112+92
 439 0228 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 14


 440 022a 1B05     		lsl	r3, r3, #20
 441 022c 01D5     		bpl	.L96
 442 022e 1023     		mov	r3, #16
 443 0230 00E0     		b	.L27
 444              	.L96:
 445 0232 0823     		mov	r3, #8
 446              	.L27:
 447              		.loc 1 298 0 is_stmt 0 discriminator 4
 448 0234 A342     		cmp	r3, r4
 449 0236 07D2     		bcs	.L28
 299:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 300:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 diffCount = UART_I2C_FIFO_SIZE;
 450              		.loc 1 300 0 is_stmt 1
 451 0238 4F4B     		ldr	r3, .L112+92
 452 023a 1B68     		ldr	r3, [r3]
 453 023c 1B05     		lsl	r3, r3, #20
 454 023e 01D5     		bpl	.L97
 455 0240 1024     		mov	r4, #16
 456              	.LVL28:
 457 0242 1EE0     		b	.L32
 458              	.LVL29:
 459              	.L97:
 460 0244 0824     		mov	r4, #8
 461              	.LVL30:
 462 0246 1CE0     		b	.L32
 463              	.LVL31:
 464              	.L28:
 301:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             }
 302:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             else
 303:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 304:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 if(0u == diffCount)
 465              		.loc 1 304 0
 466 0248 002C     		cmp	r4, #0
 467 024a 1AD1     		bne	.L32
 305:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 {
 306:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     UART_DISABLE_MASTER_AUTO_DATA_ACK;
 468              		.loc 1 306 0
 469 024c 3E4A     		ldr	r2, .L112+44
 470              	.LVL32:
 471 024e 1168     		ldr	r1, [r2]
 472 0250 3E4B     		ldr	r3, .L112+48
 473 0252 0B40     		and	r3, r1
 474 0254 1360     		str	r3, [r2]
 307:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 308:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     diffCount   = UART_I2C_FIFO_SIZE;
 475              		.loc 1 308 0
 476 0256 484B     		ldr	r3, .L112+92
 477 0258 1B68     		ldr	r3, [r3]
 478 025a 1B05     		lsl	r3, r3, #20
 479 025c 01D5     		bpl	.L98
 480 025e 1034     		add	r4, r4, #16
 481              	.LVL33:
 482 0260 00E0     		b	.L31
 483              	.LVL34:
 484              	.L98:
 485 0262 0824     		mov	r4, #8
 486              	.LVL35:
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 15


 487              	.L31:
 309:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     endTransfer = UART_I2C_CMPLT_ANY_TRANSFER;
 488              		.loc 1 309 0 discriminator 4
 489 0264 0122     		mov	r2, #1
 490 0266 0CE0     		b	.L32
 491              	.LVL36:
 492              	.L33:
 310:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 }
 311:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             }
 312:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 313:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             for(; (0u != diffCount); diffCount--)
 314:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 315:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 UART_mstrRdBufPtr[UART_mstrRdBufIndex] = (uint8)
 493              		.loc 1 315 0 discriminator 2
 494 0268 424B     		ldr	r3, .L112+88
 495 026a 1968     		ldr	r1, [r3]
 496 026c 4348     		ldr	r0, .L112+96
 497 026e 0068     		ldr	r0, [r0]
 498 0270 4118     		add	r1, r0, r1
 316:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                                                         UART_RX_FIF
 499              		.loc 1 316 0 discriminator 2
 500 0272 4348     		ldr	r0, .L112+100
 501 0274 0068     		ldr	r0, [r0]
 315:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                                                         UART_RX_FIF
 502              		.loc 1 315 0 discriminator 2
 503 0276 C0B2     		uxtb	r0, r0
 504 0278 0870     		strb	r0, [r1]
 317:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 UART_mstrRdBufIndex++;
 505              		.loc 1 317 0 discriminator 2
 506 027a 1968     		ldr	r1, [r3]
 507 027c 0131     		add	r1, r1, #1
 508 027e 1960     		str	r1, [r3]
 313:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 509              		.loc 1 313 0 discriminator 2
 510 0280 013C     		sub	r4, r4, #1
 511              	.LVL37:
 512              	.L32:
 313:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 513              		.loc 1 313 0 is_stmt 0 discriminator 1
 514 0282 002C     		cmp	r4, #0
 515 0284 F0D1     		bne	.L33
 516 0286 19E0     		b	.L34
 517              	.LVL38:
 518              	.L26:
 318:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             }
 319:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 320:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* INTR_RX_NOT_EMPTY:
 321:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * RX direction: the master received one data byte, ACK or NACK it.
 322:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * The last byte is stored and NACKed by the master. The NACK and Stop is
 323:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * generated by one command generate Stop.
 324:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         */
 325:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         else if(UART_CHECK_INTR_RX_MASKED(UART_INTR_RX_NOT_EMPTY))
 519              		.loc 1 325 0 is_stmt 1
 520 0288 374B     		ldr	r3, .L112+76
 521 028a 1B68     		ldr	r3, [r3]
 522 028c 5B07     		lsl	r3, r3, #29
 523 028e 15D5     		bpl	.L34
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 16


 326:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 327:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             /* Put data in component buffer */
 328:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_mstrRdBufPtr[UART_mstrRdBufIndex] = (uint8) UART_RX_FIFO_RD_REG;
 524              		.loc 1 328 0
 525 0290 384B     		ldr	r3, .L112+88
 526 0292 1968     		ldr	r1, [r3]
 527 0294 3948     		ldr	r0, .L112+96
 528 0296 0068     		ldr	r0, [r0]
 529 0298 4118     		add	r1, r0, r1
 530 029a 3948     		ldr	r0, .L112+100
 531 029c 0068     		ldr	r0, [r0]
 532 029e C0B2     		uxtb	r0, r0
 533 02a0 0870     		strb	r0, [r1]
 329:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_mstrRdBufIndex++;
 534              		.loc 1 329 0
 535 02a2 1968     		ldr	r1, [r3]
 536 02a4 0131     		add	r1, r1, #1
 537 02a6 1960     		str	r1, [r3]
 330:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 331:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             if(UART_mstrRdBufIndex < UART_mstrRdBufSize)
 538              		.loc 1 331 0
 539 02a8 1968     		ldr	r1, [r3]
 540 02aa 304B     		ldr	r3, .L112+80
 541 02ac 1B68     		ldr	r3, [r3]
 542 02ae 9942     		cmp	r1, r3
 543 02b0 03D2     		bcs	.L99
 332:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 333:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 UART_I2C_MASTER_GENERATE_ACK;
 544              		.loc 1 333 0
 545 02b2 0421     		mov	r1, #4
 546 02b4 204B     		ldr	r3, .L112+28
 547 02b6 1960     		str	r1, [r3]
 548 02b8 00E0     		b	.L34
 549              	.L99:
 334:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             }
 335:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             else
 336:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 337:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                endTransfer = UART_I2C_CMPLT_ANY_TRANSFER;
 550              		.loc 1 337 0
 551 02ba 0122     		mov	r2, #1
 552              	.LVL39:
 553              	.L34:
 338:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             }
 339:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 340:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         else
 341:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 342:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             /* Do nothing */
 343:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 344:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 345:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_ClearRxInterruptSource(UART_INTR_RX_ALL);
 554              		.loc 1 345 0
 555 02bc 3149     		ldr	r1, .L112+104
 556 02be 324B     		ldr	r3, .L112+108
 557 02c0 1960     		str	r1, [r3]
 558 02c2 A6E0     		b	.L24
 559              	.L25:
 346:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     }
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 17


 347:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     else /* Writing */
 348:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     {
 349:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* INTR_MASTER_I2C_NACK :
 350:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * The master writes data to the slave and NACK was received: not all the by
 351:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * written to the slave from the TX FIFO. Revert the index if there is data 
 352:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * the TX FIFO and pass control to a complete transfer.
 353:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         */
 354:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         if(UART_CHECK_INTR_MASTER_MASKED(UART_INTR_MASTER_I2C_NACK))
 560              		.loc 1 354 0
 561 02c4 1A4B     		ldr	r3, .L112+20
 562 02c6 1B68     		ldr	r3, [r3]
 563 02c8 9B07     		lsl	r3, r3, #30
 564 02ca 65D5     		bpl	.L35
 355:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 356:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_ClearMasterInterruptSource(UART_INTR_MASTER_I2C_NACK);
 565              		.loc 1 356 0
 566 02cc 0222     		mov	r2, #2
 567              	.LVL40:
 568 02ce 214B     		ldr	r3, .L112+56
 569 02d0 1A60     		str	r2, [r3]
 357:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 358:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             /* Rollback write buffer index: NACKed byte remains in shifter */
 359:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_mstrWrBufIndexTmp -= (UART_GET_TX_FIFO_ENTRIES +
 570              		.loc 1 359 0
 571 02d2 2E4A     		ldr	r2, .L112+112
 572 02d4 1368     		ldr	r3, [r2]
 573 02d6 1F21     		mov	r1, #31
 574 02d8 1940     		and	r1, r3
 360:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                                    UART_GET_TX_FIFO_SR_VALID);
 575              		.loc 1 360 0
 576 02da 1368     		ldr	r3, [r2]
 577 02dc 8022     		mov	r2, #128
 578 02de 1202     		lsl	r2, r2, #8
 579 02e0 1340     		and	r3, r2
 359:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                                    UART_GET_TX_FIFO_SR_VALID);
 580              		.loc 1 359 0
 581 02e2 00D0     		beq	.L36
 582 02e4 0123     		mov	r3, #1
 583              	.L36:
 359:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                                    UART_GET_TX_FIFO_SR_VALID);
 584              		.loc 1 359 0 is_stmt 0 discriminator 4
 585 02e6 CB18     		add	r3, r1, r3
 586 02e8 294A     		ldr	r2, .L112+116
 587 02ea 1168     		ldr	r1, [r2]
 588 02ec CB1A     		sub	r3, r1, r3
 589 02ee 1360     		str	r3, [r2]
 361:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 362:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             /* Update number of transferred bytes */
 363:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_mstrWrBufIndex = UART_mstrWrBufIndexTmp;
 590              		.loc 1 363 0 is_stmt 1 discriminator 4
 591 02f0 1268     		ldr	r2, [r2]
 592 02f2 284B     		ldr	r3, .L112+120
 593 02f4 1A60     		str	r2, [r3]
 364:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 365:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_mstrStatus |= (uint16) (UART_I2C_MSTAT_ERR_XFER |
 594              		.loc 1 365 0 discriminator 4
 595 02f6 0F4A     		ldr	r2, .L112+24
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 18


 596 02f8 1188     		ldrh	r1, [r2]
 597 02fa 8423     		mov	r3, #132
 598 02fc 9B00     		lsl	r3, r3, #2
 599 02fe 0B43     		orr	r3, r1
 600 0300 1380     		strh	r3, [r2]
 366:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                                      UART_I2C_MSTAT_ERR_SHORT_XFER)
 367:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 368:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_CLEAR_TX_FIFO;
 601              		.loc 1 368 0 discriminator 4
 602 0302 0F4B     		ldr	r3, .L112+36
 603 0304 1A68     		ldr	r2, [r3]
 604 0306 8021     		mov	r1, #128
 605 0308 4902     		lsl	r1, r1, #9
 606 030a 0A43     		orr	r2, r1
 607 030c 1A60     		str	r2, [r3]
 608 030e 1968     		ldr	r1, [r3]
 609 0310 0C4A     		ldr	r2, .L112+40
 610 0312 0A40     		and	r2, r1
 611 0314 1A60     		str	r2, [r3]
 612              	.LVL41:
 369:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 370:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             endTransfer = UART_I2C_CMPLT_ANY_TRANSFER;
 613              		.loc 1 370 0 discriminator 4
 614 0316 0122     		mov	r2, #1
 615 0318 7BE0     		b	.L24
 616              	.L113:
 617 031a C046     		.align	2
 618              	.L112:
 619 031c 00000000 		.word	UART_customIntrHandler
 620 0320 8C0E2440 		.word	1076104844
 621 0324 880E2440 		.word	1076104840
 622 0328 00000000 		.word	UART_state
 623 032c 00000000 		.word	UART_mode
 624 0330 0C0F2440 		.word	1076104972
 625 0334 00000000 		.word	UART_mstrStatus
 626 0338 68002440 		.word	1076101224
 627 033c 4C0F2440 		.word	1076105036
 628 0340 04022440 		.word	1076101636
 629 0344 FFFFFEFF 		.word	-65537
 630 0348 60002440 		.word	1076101216
 631 034c FFFEFFFF 		.word	-257
 632 0350 17030000 		.word	791
 633 0354 000F2440 		.word	1076104960
 634 0358 C80F2440 		.word	1076105160
 635 035c 880F2440 		.word	1076105096
 636 0360 00000000 		.word	UART_slStatus
 637 0364 00000000 		.word	UART_mstrWrBufSize
 638 0368 CC0F2440 		.word	1076105164
 639 036c 00000000 		.word	UART_mstrRdBufSize
 640 0370 08032440 		.word	1076101896
 641 0374 00000000 		.word	UART_mstrRdBufIndex
 642 0378 00002440 		.word	1076101120
 643 037c 00000000 		.word	UART_mstrRdBufPtr
 644 0380 40032440 		.word	1076101952
 645 0384 ED0F0000 		.word	4077
 646 0388 C00F2440 		.word	1076105152
 647 038c 08022440 		.word	1076101640
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 19


 648 0390 00000000 		.word	UART_mstrWrBufIndexTmp
 649 0394 00000000 		.word	UART_mstrWrBufIndex
 650              	.LVL42:
 651              	.L35:
 371:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 372:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* INTR_TX_EMPTY :
 373:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * TX direction: the TX FIFO is EMPTY, the data from the buffer needs to be 
 374:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * When there is no data in the component buffer, the underflow interrupt is
 375:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * enabled to catch when all the data has been transferred.
 376:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         */
 377:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         else if(UART_CHECK_INTR_TX_MASKED(UART_INTR_TX_EMPTY))
 652              		.loc 1 377 0
 653 0398 CE4B     		ldr	r3, .L114
 654 039a 1B68     		ldr	r3, [r3]
 655 039c DB06     		lsl	r3, r3, #27
 656 039e 1ED4     		bmi	.L37
 657 03a0 2EE0     		b	.L111
 658              	.L42:
 378:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 379:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             while(UART_I2C_FIFO_SIZE != UART_GET_TX_FIFO_ENTRIES)
 380:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 381:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 /* The temporary mstrWrBufIndexTmp is used because slave could NACK
 382:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 * roll-back required in this case. The mstrWrBufIndex is updated at
 383:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 */
 384:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 if(UART_mstrWrBufIndexTmp < UART_mstrWrBufSize)
 659              		.loc 1 384 0
 660 03a2 CD4B     		ldr	r3, .L114+4
 661 03a4 1968     		ldr	r1, [r3]
 662 03a6 CD4B     		ldr	r3, .L114+8
 663 03a8 1B68     		ldr	r3, [r3]
 664 03aa 9942     		cmp	r1, r3
 665 03ac 24D2     		bcs	.L39
 385:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 {
 386:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 #if(!UART_CY_SCBIP_V0)
 387:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                    /* Clear INTR_TX.UNDERFLOW before putting the last byte into TX 
 388:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     * a proper trigger at the end of transaction when INTR_TX.UNDER
 389:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     * event. Ticket ID# 156735.
 390:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     */
 391:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     if(UART_mstrWrBufIndexTmp == (UART_mstrWrBufSize - 1u))
 666              		.loc 1 391 0
 667 03ae CB4B     		ldr	r3, .L114+8
 668 03b0 1B68     		ldr	r3, [r3]
 669 03b2 013B     		sub	r3, r3, #1
 670 03b4 C849     		ldr	r1, .L114+4
 671 03b6 0968     		ldr	r1, [r1]
 672 03b8 8B42     		cmp	r3, r1
 673 03ba 04D1     		bne	.L40
 392:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     {
 393:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                         UART_ClearTxInterruptSource(UART_INTR_TX_UNDERFLOW);
 674              		.loc 1 393 0
 675 03bc 4023     		mov	r3, #64
 676 03be C849     		ldr	r1, .L114+12
 677 03c0 0B60     		str	r3, [r1]
 394:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                         UART_SetTxInterruptMode(UART_INTR_TX_UNDERFLOW);
 678              		.loc 1 394 0
 679 03c2 C849     		ldr	r1, .L114+16
 680 03c4 0B60     		str	r3, [r1]
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 20


 681              	.L40:
 395:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     }
 396:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                  #endif /* (!UART_CY_SCBIP_V0) */
 397:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 398:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     /* Put data into TX FIFO */
 399:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     UART_TX_FIFO_WR_REG = (uint32) UART_mstrWrBufPtr[UART_mstrWrBuf
 682              		.loc 1 399 0
 683 03c6 C44B     		ldr	r3, .L114+4
 684 03c8 1968     		ldr	r1, [r3]
 685 03ca C748     		ldr	r0, .L114+20
 686 03cc 0068     		ldr	r0, [r0]
 687 03ce 4118     		add	r1, r0, r1
 688 03d0 0978     		ldrb	r1, [r1]
 689 03d2 C9B2     		uxtb	r1, r1
 690 03d4 C548     		ldr	r0, .L114+24
 691 03d6 0160     		str	r1, [r0]
 400:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     UART_mstrWrBufIndexTmp++;
 692              		.loc 1 400 0
 693 03d8 1968     		ldr	r1, [r3]
 694 03da 0131     		add	r1, r1, #1
 695 03dc 1960     		str	r1, [r3]
 696              	.L37:
 379:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 697              		.loc 1 379 0
 698 03de C44B     		ldr	r3, .L114+28
 699 03e0 1B68     		ldr	r3, [r3]
 700 03e2 1B05     		lsl	r3, r3, #20
 701 03e4 01D5     		bpl	.L100
 702 03e6 1021     		mov	r1, #16
 703 03e8 00E0     		b	.L41
 704              	.L100:
 705 03ea 0821     		mov	r1, #8
 706              	.L41:
 379:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 707              		.loc 1 379 0 is_stmt 0 discriminator 4
 708 03ec C14B     		ldr	r3, .L114+32
 709 03ee 1B68     		ldr	r3, [r3]
 710 03f0 1F20     		mov	r0, #31
 711 03f2 0340     		and	r3, r0
 712 03f4 9942     		cmp	r1, r3
 713 03f6 D4D1     		bne	.L42
 714              	.L39:
 401:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 }
 402:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 else
 403:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 {
 404:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     break; /* No more data to put */
 405:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 }
 406:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             }
 407:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 408:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         #if(UART_CY_SCBIP_V0)
 409:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             if(UART_mstrWrBufIndexTmp == UART_mstrWrBufSize)
 410:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 411:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 UART_SetTxInterruptMode(UART_INTR_TX_UNDERFLOW);
 412:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             }
 413:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 414:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_ClearTxInterruptSource(UART_INTR_TX_ALL);
 415:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         #else
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 21


 416:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_ClearTxInterruptSource(UART_INTR_TX_EMPTY);
 715              		.loc 1 416 0 is_stmt 1
 716 03f8 1021     		mov	r1, #16
 717 03fa B94B     		ldr	r3, .L114+12
 718 03fc 1960     		str	r1, [r3]
 719 03fe 08E0     		b	.L24
 720              	.L111:
 417:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         #endif /* (UART_CY_SCBIP_V0) */
 418:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 419:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* INTR_TX_UNDERFLOW:
 420:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * TX direction: all data from the TX FIFO was transferred to the slave.
 421:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * The transaction needs to be completed.
 422:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         */
 423:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         else if(UART_CHECK_INTR_TX_MASKED(UART_INTR_TX_UNDERFLOW))
 721              		.loc 1 423 0
 722 0400 B44B     		ldr	r3, .L114
 723 0402 1B68     		ldr	r3, [r3]
 724 0404 5B06     		lsl	r3, r3, #25
 725 0406 04D5     		bpl	.L24
 424:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 425:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             /* Update number of transferred bytes */
 426:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_mstrWrBufIndex = UART_mstrWrBufIndexTmp;
 726              		.loc 1 426 0
 727 0408 B34B     		ldr	r3, .L114+4
 728 040a 1A68     		ldr	r2, [r3]
 729              	.LVL43:
 730 040c BA4B     		ldr	r3, .L114+36
 731 040e 1A60     		str	r2, [r3]
 732              	.LVL44:
 427:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 428:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             endTransfer = UART_I2C_CMPLT_ANY_TRANSFER;
 733              		.loc 1 428 0
 734 0410 0122     		mov	r2, #1
 735              	.LVL45:
 736              	.L24:
 429:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 430:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         else
 431:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 432:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             /* Do nothing */
 433:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 434:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     }
 435:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 436:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 437:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 if(0u != endTransfer) /* Complete transfer */
 737              		.loc 1 437 0
 738 0412 002A     		cmp	r2, #0
 739 0414 00D1     		bne	.LCB804
 740 0416 4DE2     		b	.L1	@long jump
 741              	.LCB804:
 438:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 439:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* Clean-up master after reading: only in case of NACK */
 440:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_DISABLE_MASTER_AUTO_DATA_ACK;
 742              		.loc 1 440 0
 743 0418 B84A     		ldr	r2, .L114+40
 744              	.LVL46:
 745 041a 1168     		ldr	r1, [r2]
 746 041c B84B     		ldr	r3, .L114+44
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 22


 747 041e 0B40     		and	r3, r1
 748 0420 1360     		str	r3, [r2]
 441:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 442:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* Disable data processing interrupts: they have to be cleared before */
 443:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_SetRxInterruptMode(UART_NO_INTR_SOURCES);
 749              		.loc 1 443 0
 750 0422 0023     		mov	r3, #0
 751 0424 B74A     		ldr	r2, .L114+48
 752 0426 1360     		str	r3, [r2]
 444:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_SetTxInterruptMode(UART_NO_INTR_SOURCES);
 753              		.loc 1 444 0
 754 0428 AE4A     		ldr	r2, .L114+16
 755 042a 1360     		str	r3, [r2]
 445:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 446:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     if(UART_CHECK_I2C_MODE_NO_STOP(UART_mstrControl))
 756              		.loc 1 446 0
 757 042c B64B     		ldr	r3, .L114+52
 758 042e 1B78     		ldrb	r3, [r3]
 759 0430 9B07     		lsl	r3, r3, #30
 760 0432 0ED5     		bpl	.L43
 447:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     {
 448:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* On-going transaction is suspended: the ReStart is generated by the API r
 449:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_mstrStatus |= (uint16) (UART_I2C_MSTAT_XFER_HALT |
 450:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                                  UART_GET_I2C_MSTAT_CMPLT);
 761              		.loc 1 450 0
 762 0434 B54B     		ldr	r3, .L114+56
 763 0436 1B78     		ldrb	r3, [r3]
 449:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                                  UART_GET_I2C_MSTAT_CMPLT);
 764              		.loc 1 449 0
 765 0438 DB07     		lsl	r3, r3, #31
 766 043a 01D5     		bpl	.L101
 767 043c 0923     		mov	r3, #9
 768 043e 00E0     		b	.L44
 769              	.L101:
 770 0440 0A23     		mov	r3, #10
 771              	.L44:
 449:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                                  UART_GET_I2C_MSTAT_CMPLT);
 772              		.loc 1 449 0 is_stmt 0 discriminator 4
 773 0442 B34A     		ldr	r2, .L114+60
 774 0444 1188     		ldrh	r1, [r2]
 775 0446 0B43     		orr	r3, r1
 776 0448 1380     		strh	r3, [r2]
 451:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 452:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_state = UART_I2C_FSM_MSTR_HALT;
 777              		.loc 1 452 0 is_stmt 1 discriminator 4
 778 044a 6022     		mov	r2, #96
 779 044c AF4B     		ldr	r3, .L114+56
 780 044e 1A70     		strb	r2, [r3]
 781 0450 30E2     		b	.L1
 782              	.L43:
 453:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     }
 454:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     else
 455:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     {
 456:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* Complete transaction: exclude the data processing state and generate Sto
 457:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * The completion status will be set after Stop generation.
 458:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * A special case is read: because NACK and Stop are generated by the comman
 459:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * Lost arbitration can occur during NACK generation when
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 23


 460:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * the other master is still reading from the slave.
 461:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         */
 462:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_I2C_MASTER_GENERATE_STOP;
 783              		.loc 1 462 0
 784 0452 B04B     		ldr	r3, .L114+64
 785 0454 1B68     		ldr	r3, [r3]
 786 0456 9B06     		lsl	r3, r3, #26
 787 0458 01D5     		bpl	.L102
 788 045a 1822     		mov	r2, #24
 789 045c 00E0     		b	.L45
 790              	.L102:
 791 045e 1022     		mov	r2, #16
 792              	.L45:
 793              		.loc 1 462 0 is_stmt 0 discriminator 4
 794 0460 AD4B     		ldr	r3, .L114+68
 795 0462 1A60     		str	r2, [r3]
 796 0464 26E2     		b	.L1
 797              	.LVL47:
 798              	.L17:
 463:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     }
 464:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 465:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             }
 466:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 467:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         } /* (UART_I2C_MASTER) */
 468:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         
 469:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 470:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     } /* (UART_CHECK_I2C_FSM_MASTER) */
 471:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 472:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 473:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     /* FSM Slave */
 474:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     else if(UART_CHECK_I2C_FSM_SLAVE)
 799              		.loc 1 474 0 is_stmt 1
 800 0466 A94B     		ldr	r3, .L114+56
 801 0468 1B78     		ldrb	r3, [r3]
 802 046a DB06     		lsl	r3, r3, #27
 803 046c 00D4     		bmi	.LCB881
 804 046e 0BE2     		b	.L46	@long jump
 805              	.LCB881:
 475:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     {
 476:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         if(UART_I2C_SLAVE)
 806              		.loc 1 476 0
 807 0470 AA4B     		ldr	r3, .L114+72
 808 0472 1B78     		ldrb	r3, [r3]
 809 0474 DB07     		lsl	r3, r3, #31
 810 0476 00D4     		bmi	.LCB888
 811 0478 1CE2     		b	.L1	@long jump
 812              	.LCB888:
 477:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         {
 478:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             /* INTR_SLAVE_NACK:
 479:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * The master completes reading the slave: the appropriate flags have to be set.
 480:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * The TX FIFO is cleared after an overflow condition is set.
 481:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             */
 482:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             if(UART_CHECK_INTR_SLAVE_MASKED(UART_INTR_SLAVE_I2C_NACK))
 813              		.loc 1 482 0
 814 047a A94B     		ldr	r3, .L114+76
 815 047c 1B68     		ldr	r3, [r3]
 816 047e 9B07     		lsl	r3, r3, #30
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 24


 817 0480 3ED5     		bpl	.L47
 483:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             {
 484:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_ClearSlaveInterruptSource(UART_INTR_SLAVE_I2C_NACK);
 818              		.loc 1 484 0
 819 0482 0222     		mov	r2, #2
 820              	.LVL48:
 821 0484 A74B     		ldr	r3, .L114+80
 822 0486 1A60     		str	r2, [r3]
 485:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 486:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 /* All entries that remain in TX FIFO max value is 9: 8 (FIFO) + 1 (SHIFTER) */
 487:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 diffCount = (UART_GET_TX_FIFO_ENTRIES + UART_GET_TX_FIFO_SR_VALID);
 823              		.loc 1 487 0
 824 0488 9A4A     		ldr	r2, .L114+32
 825 048a 1368     		ldr	r3, [r2]
 826 048c 1F21     		mov	r1, #31
 827 048e 1940     		and	r1, r3
 828 0490 1368     		ldr	r3, [r2]
 829 0492 8022     		mov	r2, #128
 830 0494 1202     		lsl	r2, r2, #8
 831 0496 1340     		and	r3, r2
 832 0498 00D0     		beq	.L48
 833 049a 0123     		mov	r3, #1
 834              	.L48:
 835              		.loc 1 487 0 is_stmt 0 discriminator 4
 836 049c CB18     		add	r3, r1, r3
 837              	.LVL49:
 488:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 489:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 if(UART_slOverFlowCount > diffCount) /* Overflow */
 838              		.loc 1 489 0 is_stmt 1 discriminator 4
 839 049e A24A     		ldr	r2, .L114+84
 840 04a0 1278     		ldrb	r2, [r2]
 841 04a2 D2B2     		uxtb	r2, r2
 842 04a4 9A42     		cmp	r2, r3
 843 04a6 05D9     		bls	.L49
 490:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 491:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_slStatus |= (uint8) UART_I2C_SSTAT_RD_OVFL;
 844              		.loc 1 491 0
 845 04a8 A04A     		ldr	r2, .L114+88
 846 04aa 1178     		ldrb	r1, [r2]
 847 04ac 0423     		mov	r3, #4
 848              	.LVL50:
 849 04ae 0B43     		orr	r3, r1
 850 04b0 1370     		strb	r3, [r2]
 851 04b2 06E0     		b	.L50
 852              	.LVL51:
 853              	.L49:
 492:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 493:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 else /* No Overflow */
 494:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 495:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* Roll-back temporary index */
 496:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_slRdBufIndexTmp -= (diffCount - UART_slOverFlowCount);
 854              		.loc 1 496 0
 855 04b4 9C4A     		ldr	r2, .L114+84
 856 04b6 1278     		ldrb	r2, [r2]
 857 04b8 9B1A     		sub	r3, r3, r2
 858              	.LVL52:
 859 04ba 9D49     		ldr	r1, .L114+92
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 25


 860 04bc 0A68     		ldr	r2, [r1]
 861 04be D31A     		sub	r3, r2, r3
 862 04c0 0B60     		str	r3, [r1]
 863              	.L50:
 497:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 498:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 499:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 /* Update slave of transferred bytes */
 500:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_slRdBufIndex = UART_slRdBufIndexTmp;
 864              		.loc 1 500 0
 865 04c2 9B4B     		ldr	r3, .L114+92
 866 04c4 1A68     		ldr	r2, [r3]
 867 04c6 9B4B     		ldr	r3, .L114+96
 868 04c8 1A60     		str	r2, [r3]
 501:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 502:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 /* Clean-up TX FIFO */
 503:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_SetTxInterruptMode(UART_NO_INTR_SOURCES);
 869              		.loc 1 503 0
 870 04ca 0023     		mov	r3, #0
 871 04cc 854A     		ldr	r2, .L114+16
 872 04ce 1360     		str	r3, [r2]
 504:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_slOverFlowCount = 0u;
 873              		.loc 1 504 0
 874 04d0 954A     		ldr	r2, .L114+84
 875 04d2 1370     		strb	r3, [r2]
 505:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_CLEAR_TX_FIFO;
 876              		.loc 1 505 0
 877 04d4 984B     		ldr	r3, .L114+100
 878 04d6 1A68     		ldr	r2, [r3]
 879 04d8 8021     		mov	r1, #128
 880 04da 4902     		lsl	r1, r1, #9
 881 04dc 0A43     		orr	r2, r1
 882 04de 1A60     		str	r2, [r3]
 883 04e0 1968     		ldr	r1, [r3]
 884 04e2 964A     		ldr	r2, .L114+104
 885 04e4 0A40     		and	r2, r1
 886 04e6 1A60     		str	r2, [r3]
 506:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 507:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 /* Complete master reading */
 508:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_slStatus &= (uint8) ~UART_I2C_SSTAT_RD_BUSY;
 887              		.loc 1 508 0
 888 04e8 904B     		ldr	r3, .L114+88
 889 04ea 1A78     		ldrb	r2, [r3]
 890 04ec 0221     		mov	r1, #2
 891 04ee 8A43     		bic	r2, r1
 892 04f0 1A70     		strb	r2, [r3]
 509:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_slStatus |= (uint8)  UART_I2C_SSTAT_RD_CMPLT;
 893              		.loc 1 509 0
 894 04f2 1978     		ldrb	r1, [r3]
 895 04f4 0122     		mov	r2, #1
 896 04f6 0A43     		orr	r2, r1
 897 04f8 1A70     		strb	r2, [r3]
 510:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_state     =  UART_I2C_FSM_IDLE;
 898              		.loc 1 510 0
 899 04fa 1022     		mov	r2, #16
 900 04fc 834B     		ldr	r3, .L114+56
 901 04fe 1A70     		strb	r2, [r3]
 902              	.L47:
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 26


 511:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             }
 512:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 513:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 514:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             /* INTR_SLAVE_I2C_WRITE_STOP:
 515:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * The master completes writing to the slave: the appropriate flags have to be set.
 516:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * The RX FIFO contains 1-8 bytes from the previous transaction which needs to be read.
 517:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * There is a possibility that RX FIFO contains an address, it needs to leave it there.
 518:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             */
 519:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             if(UART_CHECK_INTR_SLAVE_MASKED(UART_INTR_SLAVE_I2C_WRITE_STOP))
 903              		.loc 1 519 0
 904 0500 874B     		ldr	r3, .L114+76
 905 0502 1B68     		ldr	r3, [r3]
 906 0504 1B07     		lsl	r3, r3, #28
 907 0506 45D5     		bpl	.L51
 520:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             {
 521:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_ClearSlaveInterruptSource(UART_INTR_SLAVE_I2C_WRITE_STOP);
 908              		.loc 1 521 0
 909 0508 0822     		mov	r2, #8
 910 050a 864B     		ldr	r3, .L114+80
 911 050c 1A60     		str	r2, [r3]
 522:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 523:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 /* Read bytes from RX FIFO when auto data ACK receive logic is enabled. Otherwise a
 524:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 * were already read from the RX FIFO except for address byte which has to stay here
 525:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 * I2C_ADDR_MATCH.
 526:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 */
 527:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 if (0u != (UART_I2C_CTRL_REG & UART_I2C_CTRL_S_READY_DATA_ACK))
 912              		.loc 1 527 0
 913 050e 7B4B     		ldr	r3, .L114+40
 914 0510 1B68     		ldr	r3, [r3]
 915 0512 9B04     		lsl	r3, r3, #18
 916 0514 1AD4     		bmi	.L52
 917 0516 22E0     		b	.L53
 918              	.L56:
 528:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 529:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     while(0u != UART_GET_RX_FIFO_ENTRIES)
 530:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     {
 531:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         if(UART_CHECK_I2C_ACCEPT_ADDRESS)
 919              		.loc 1 531 0
 920 0518 894B     		ldr	r3, .L114+108
 921 051a 1B78     		ldrb	r3, [r3]
 922 051c 002B     		cmp	r3, #0
 923 051e 09D0     		beq	.L54
 532:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 533:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             if((1u == UART_GET_RX_FIFO_ENTRIES) &&
 924              		.loc 1 533 0
 925 0520 884B     		ldr	r3, .L114+112
 926 0522 1B68     		ldr	r3, [r3]
 927 0524 1F22     		mov	r2, #31
 928 0526 1340     		and	r3, r2
 929 0528 012B     		cmp	r3, #1
 930 052a 03D1     		bne	.L54
 534:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                (UART_CHECK_INTR_SLAVE_MASKED(UART_INTR_SLAVE_I2C_ADDR_MATCH)))
 931              		.loc 1 534 0 discriminator 1
 932 052c 7C4B     		ldr	r3, .L114+76
 933 052e 1B68     		ldr	r3, [r3]
 533:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                (UART_CHECK_INTR_SLAVE_MASKED(UART_INTR_SLAVE_I2C_ADDR_MATCH)))
 934              		.loc 1 533 0 discriminator 1
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 27


 935 0530 5B06     		lsl	r3, r3, #25
 936 0532 0FD4     		bmi	.L55
 937              	.L54:
 535:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 536:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 break; /* Leave address in RX FIFO */
 537:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             }
 538:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 539:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         
 540:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 541:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* Put data in component buffer */
 542:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_slWrBufPtr[UART_slWrBufIndex] = (uint8) UART_RX_FIFO_RD_REG;
 938              		.loc 1 542 0
 939 0534 844B     		ldr	r3, .L114+116
 940 0536 1A68     		ldr	r2, [r3]
 941 0538 8449     		ldr	r1, .L114+120
 942 053a 0968     		ldr	r1, [r1]
 943 053c 8A18     		add	r2, r1, r2
 944 053e 8449     		ldr	r1, .L114+124
 945 0540 0968     		ldr	r1, [r1]
 946 0542 C9B2     		uxtb	r1, r1
 947 0544 1170     		strb	r1, [r2]
 543:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_slWrBufIndex++;
 948              		.loc 1 543 0
 949 0546 1A68     		ldr	r2, [r3]
 950 0548 0132     		add	r2, r2, #1
 951 054a 1A60     		str	r2, [r3]
 952              	.L52:
 529:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     {
 953              		.loc 1 529 0
 954 054c 7D4B     		ldr	r3, .L114+112
 955 054e 1B68     		ldr	r3, [r3]
 956 0550 DB06     		lsl	r3, r3, #27
 957 0552 E1D1     		bne	.L56
 958              	.L55:
 544:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     }
 545:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 546:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_DISABLE_SLAVE_AUTO_DATA;
 959              		.loc 1 546 0
 960 0554 694A     		ldr	r2, .L114+40
 961 0556 1168     		ldr	r1, [r2]
 962 0558 7E4B     		ldr	r3, .L114+128
 963 055a 0B40     		and	r3, r1
 964 055c 1360     		str	r3, [r2]
 965              	.L53:
 547:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 548:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 549:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 if(UART_CHECK_INTR_RX(UART_INTR_RX_OVERFLOW))
 966              		.loc 1 549 0
 967 055e 7E4B     		ldr	r3, .L114+132
 968 0560 1B68     		ldr	r3, [r3]
 969 0562 9B06     		lsl	r3, r3, #26
 970 0564 04D5     		bpl	.L57
 550:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 551:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_slStatus |= (uint8) UART_I2C_SSTAT_WR_OVFL;
 971              		.loc 1 551 0
 972 0566 714A     		ldr	r2, .L114+88
 973 0568 1178     		ldrb	r1, [r2]
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 28


 974 056a 4023     		mov	r3, #64
 975 056c 0B43     		orr	r3, r1
 976 056e 1370     		strb	r3, [r2]
 977              	.L57:
 552:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 553:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 554:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 /* Clears RX interrupt sources triggered on data receiving */
 555:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_SetRxInterruptMode(UART_NO_INTR_SOURCES);
 978              		.loc 1 555 0
 979 0570 0022     		mov	r2, #0
 980 0572 644B     		ldr	r3, .L114+48
 981 0574 1A60     		str	r2, [r3]
 556:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_ClearRxInterruptSource(UART_INTR_RX_ALL);
 982              		.loc 1 556 0
 983 0576 794A     		ldr	r2, .L114+136
 984 0578 774B     		ldr	r3, .L114+132
 985 057a 1A60     		str	r2, [r3]
 557:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 558:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 /* Complete master writing */
 559:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_slStatus &= (uint8) ~UART_I2C_SSTAT_WR_BUSY;
 986              		.loc 1 559 0
 987 057c 6B4B     		ldr	r3, .L114+88
 988 057e 1A78     		ldrb	r2, [r3]
 989 0580 2021     		mov	r1, #32
 990 0582 8A43     		bic	r2, r1
 991 0584 1A70     		strb	r2, [r3]
 560:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_slStatus |= (uint8)  UART_I2C_SSTAT_WR_CMPLT;
 992              		.loc 1 560 0
 993 0586 1978     		ldrb	r1, [r3]
 994 0588 1022     		mov	r2, #16
 995 058a 0A43     		orr	r2, r1
 996 058c 1A70     		strb	r2, [r3]
 561:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_state     =  UART_I2C_FSM_IDLE;
 997              		.loc 1 561 0
 998 058e 5F4B     		ldr	r3, .L114+56
 999 0590 1022     		mov	r2, #16
 1000 0592 1A70     		strb	r2, [r3]
 1001              	.L51:
 562:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             }
 563:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 564:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 565:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             /* INTR_SLAVE_I2C_ADDR_MATCH or INTR_SLAVE_I2C_GENERAL:
 566:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * The address match or general call address event starts the slave operation:
 567:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * after leaving the TX or RX direction has to be chosen.
 568:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * The wakeup interrupt must be cleared only after an address match is set.
 569:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             */
 570:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         #if (UART_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 571:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             if (UART_CHECK_INTR_SLAVE_MASKED(UART_INTR_SLAVE_I2C_ADDR_MATCH |
 1002              		.loc 1 571 0
 1003 0594 624B     		ldr	r3, .L114+76
 1004 0596 1B68     		ldr	r3, [r3]
 1005 0598 C022     		mov	r2, #192
 1006 059a 1A42     		tst	r2, r3
 1007 059c 00D1     		bne	.LCB1091
 1008 059e 80E0     		b	.L58	@long jump
 1009              	.LCB1091:
 572:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                                          UART_INTR_SLAVE_I2C_GENERAL))
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 29


 573:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         #else
 574:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             if (UART_CHECK_INTR_SLAVE_MASKED(UART_INTR_SLAVE_I2C_ADDR_MATCH))
 575:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         #endif /* (UART_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 576:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             {
 577:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 /* Clear externally clocked address match interrupt source when internally clocked 
 578:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_ClearI2CExtClkInterruptSource(UART_INTR_I2C_EC_WAKE_UP);
 1010              		.loc 1 578 0
 1011 05a0 BF3A     		sub	r2, r2, #191
 1012 05a2 6F4B     		ldr	r3, .L114+140
 1013 05a4 1A60     		str	r2, [r3]
 579:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 580:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 if (UART_I2C_CUSTOM_ADDRESS_HANDLER)
 1014              		.loc 1 580 0
 1015 05a6 554B     		ldr	r3, .L114+40
 1016 05a8 1B68     		ldr	r3, [r3]
 1017 05aa 1B05     		lsl	r3, r3, #20
 1018 05ac 03D4     		bmi	.L59
 1019              		.loc 1 580 0 is_stmt 0 discriminator 1
 1020 05ae 644B     		ldr	r3, .L114+108
 1021 05b0 1B78     		ldrb	r3, [r3]
 1022 05b2 002B     		cmp	r3, #0
 1023 05b4 0CD0     		beq	.L103
 1024              	.L59:
 581:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 582:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     if (NULL != UART_customAddressHandler)
 1025              		.loc 1 582 0 is_stmt 1
 1026 05b6 6B4B     		ldr	r3, .L114+144
 1027 05b8 1B68     		ldr	r3, [r3]
 1028 05ba 002B     		cmp	r3, #0
 1029 05bc 01D0     		beq	.L61
 583:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     {
 584:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* Call custom address handler */
 585:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         response = UART_customAddressHandler();
 1030              		.loc 1 585 0
 1031 05be 9847     		blx	r3
 1032              	.LVL53:
 1033 05c0 02E0     		b	.L62
 1034              	.LVL54:
 1035              	.L61:
 586:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     }
 587:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     else
 588:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     {
 589:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* Read address from the RX FIFO. If there is no address underflow triggers
 590:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         * componnet does not use that source. */
 591:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         (void) UART_RX_FIFO_RD_REG;
 1036              		.loc 1 591 0
 1037 05c2 634B     		ldr	r3, .L114+124
 1038 05c4 1B68     		ldr	r3, [r3]
 592:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         response = UART_I2C_ACK_ADDR;
 1039              		.loc 1 592 0
 1040 05c6 0020     		mov	r0, #0
 1041              	.LVL55:
 1042              	.L62:
 593:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     }
 594:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 595:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* Clears RX sources after address was received in the RX FIFO */
 596:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_ClearRxInterruptSource(UART_INTR_RX_ALL);
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 30


 1043              		.loc 1 596 0
 1044 05c8 644A     		ldr	r2, .L114+136
 1045 05ca 634B     		ldr	r3, .L114+132
 1046 05cc 1A60     		str	r2, [r3]
 1047 05ce 00E0     		b	.L60
 1048              	.LVL56:
 1049              	.L103:
  49:.\Generated_Source\PSoC4/UART_I2C_INT.c **** #endif /* (UART_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 1050              		.loc 1 49 0
 1051 05d0 0020     		mov	r0, #0
 1052              	.LVL57:
 1053              	.L60:
 597:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 598:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 
 599:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 600:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             #if (UART_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 601:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 if (response == UART_I2C_NAK_ADDR)
 1054              		.loc 1 601 0
 1055 05d2 0128     		cmp	r0, #1
 1056 05d4 0BD1     		bne	.L63
 602:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 603:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 #if (!UART_CY_SCBIP_V0)
 604:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* Disable write stop interrupt source as it triggers after address was NACKed.
 605:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_DISABLE_INTR_SLAVE(UART_INTR_SLAVE_I2C_WRITE_STOP);
 1057              		.loc 1 605 0
 1058 05d6 644A     		ldr	r2, .L114+148
 1059 05d8 1368     		ldr	r3, [r2]
 1060 05da 0821     		mov	r1, #8
 1061 05dc 8B43     		bic	r3, r1
 1062 05de 1360     		str	r3, [r2]
 606:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 #endif /* (!UART_CY_SCBIP_V0) */
 607:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 608:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* Clear address match and stop history */
 609:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_ClearSlaveInterruptSource(UART_INTR_SLAVE_ALL);
 1063              		.loc 1 609 0
 1064 05e0 624A     		ldr	r2, .L114+152
 1065 05e2 504B     		ldr	r3, .L114+80
 1066 05e4 1A60     		str	r2, [r3]
 610:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 611:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* ACK the address byte */
 612:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_I2C_SLAVE_GENERATE_NACK;
 1067              		.loc 1 612 0
 1068 05e6 0222     		mov	r2, #2
 1069 05e8 614B     		ldr	r3, .L114+156
 1070 05ea 1A60     		str	r2, [r3]
 1071 05ec 59E0     		b	.L58
 1072              	.L63:
 613:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 614:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 else
 615:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             #endif /* (UART_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 616:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 617:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     if(UART_CHECK_I2C_STATUS(UART_I2C_STATUS_S_READ))
 1073              		.loc 1 617 0
 1074 05ee 494B     		ldr	r3, .L114+64
 1075 05f0 1B68     		ldr	r3, [r3]
 1076 05f2 DB06     		lsl	r3, r3, #27
 1077 05f4 0FD5     		bpl	.L64
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 31


 618:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* TX direction: master reads from slave */
 619:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     {
 620:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_SetTxInterruptMode(UART_INTR_TX_EMPTY);
 1078              		.loc 1 620 0
 1079 05f6 1022     		mov	r2, #16
 1080 05f8 3A4B     		ldr	r3, .L114+16
 1081 05fa 1A60     		str	r2, [r3]
 621:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 622:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* Set temporary index to address buffer clear from API */
 623:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_slRdBufIndexTmp = UART_slRdBufIndex;
 1082              		.loc 1 623 0
 1083 05fc 4D4B     		ldr	r3, .L114+96
 1084 05fe 1A68     		ldr	r2, [r3]
 1085 0600 4B4B     		ldr	r3, .L114+92
 1086 0602 1A60     		str	r2, [r3]
 624:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 625:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* Start master reading */
 626:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_slStatus |= (uint8) UART_I2C_SSTAT_RD_BUSY;
 1087              		.loc 1 626 0
 1088 0604 494A     		ldr	r2, .L114+88
 1089 0606 1178     		ldrb	r1, [r2]
 1090 0608 0223     		mov	r3, #2
 1091 060a 0B43     		orr	r3, r1
 1092 060c 1370     		strb	r3, [r2]
 627:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_state     = UART_I2C_FSM_SL_RD;
 1093              		.loc 1 627 0
 1094 060e 1222     		mov	r2, #18
 1095 0610 3E4B     		ldr	r3, .L114+56
 1096 0612 1A70     		strb	r2, [r3]
 1097 0614 3AE0     		b	.L65
 1098              	.L64:
 628:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     }
 629:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     else
 630:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* RX direction: master writes into slave */
 631:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     {
 632:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* Calculate available buffer size */
 633:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         diffCount = (UART_slWrBufSize - UART_slWrBufIndex);
 1099              		.loc 1 633 0
 1100 0616 574B     		ldr	r3, .L114+160
 1101 0618 1B68     		ldr	r3, [r3]
 1102 061a 4B4A     		ldr	r2, .L114+116
 1103 061c 1268     		ldr	r2, [r2]
 1104 061e 9B1A     		sub	r3, r3, r2
 1105              	.LVL58:
 634:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 635:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     #if (UART_CY_SCBIP_V0)
 636:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         if(diffCount < UART_I2C_FIFO_SIZE)
 637:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* Receive data: byte-by-byte */
 638:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 639:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_SetRxInterruptMode(UART_INTR_RX_NOT_EMPTY);
 640:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 641:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         else
 642:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* Receive data: into RX FIFO */
 643:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 644:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             if(diffCount == UART_I2C_FIFO_SIZE)
 645:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 646:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 /* NACK when RX FIFO become FULL */
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 32


 647:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 UART_ENABLE_SLAVE_AUTO_DATA;
 648:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             }
 649:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             else
 650:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 651:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 /* Stretch clock when RX FIFO becomes FULL */
 652:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 UART_ENABLE_SLAVE_AUTO_DATA_ACK;
 653:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 UART_SetRxInterruptMode(UART_INTR_RX_FULL);
 654:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             }
 655:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 656:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 657:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     #else
 658:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         if(UART_CHECK_I2C_ACCEPT_ADDRESS)
 1106              		.loc 1 658 0
 1107 0620 474A     		ldr	r2, .L114+108
 1108 0622 1278     		ldrb	r2, [r2]
 1109 0624 002A     		cmp	r2, #0
 1110 0626 03D0     		beq	.L66
 659:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 660:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             /* Enable RX.NOT_EMPTY interrupt source to receive byte by byte.
 661:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             * The byte by byte receive is always chosen for the case when an addres
 662:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             * in RX FIFO. Ticket ID#175559.
 663:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             */
 664:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_SetRxInterruptMode(UART_INTR_RX_NOT_EMPTY);
 1111              		.loc 1 664 0
 1112 0628 0422     		mov	r2, #4
 1113 062a 364B     		ldr	r3, .L114+48
 1114              	.LVL59:
 1115 062c 1A60     		str	r2, [r3]
 1116 062e 25E0     		b	.L67
 1117              	.LVL60:
 1118              	.L66:
 665:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 666:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         else
 667:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 668:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             if(diffCount < UART_I2C_FIFO_SIZE)
 1119              		.loc 1 668 0
 1120 0630 2F4A     		ldr	r2, .L114+28
 1121 0632 1268     		ldr	r2, [r2]
 1122 0634 1205     		lsl	r2, r2, #20
 1123 0636 01D5     		bpl	.L104
 1124 0638 1022     		mov	r2, #16
 1125 063a 00E0     		b	.L68
 1126              	.L104:
 1127 063c 0822     		mov	r2, #8
 1128              	.L68:
 1129              		.loc 1 668 0 is_stmt 0 discriminator 4
 1130 063e 9A42     		cmp	r2, r3
 1131 0640 03D9     		bls	.L69
 669:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             /* Receive data: byte-by-byte */
 670:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 671:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 UART_SetRxInterruptMode(UART_INTR_RX_NOT_EMPTY);
 1132              		.loc 1 671 0 is_stmt 1
 1133 0642 0422     		mov	r2, #4
 1134 0644 2F4B     		ldr	r3, .L114+48
 1135              	.LVL61:
 1136 0646 1A60     		str	r2, [r3]
 1137 0648 18E0     		b	.L67
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 33


 1138              	.LVL62:
 1139              	.L69:
 672:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             }
 673:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             else
 674:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             /* Receive data: into RX FIFO */
 675:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             {
 676:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 if(diffCount == UART_I2C_FIFO_SIZE)
 1140              		.loc 1 676 0
 1141 064a 294A     		ldr	r2, .L114+28
 1142 064c 1268     		ldr	r2, [r2]
 1143 064e 1205     		lsl	r2, r2, #20
 1144 0650 01D5     		bpl	.L105
 1145 0652 1022     		mov	r2, #16
 1146 0654 00E0     		b	.L70
 1147              	.L105:
 1148 0656 0822     		mov	r2, #8
 1149              	.L70:
 1150              		.loc 1 676 0 is_stmt 0 discriminator 4
 1151 0658 9A42     		cmp	r2, r3
 1152 065a 06D1     		bne	.L71
 677:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 {
 678:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     /* NACK when RX FIFO become FULL */
 679:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     UART_ENABLE_SLAVE_AUTO_DATA;
 1153              		.loc 1 679 0 is_stmt 1
 1154 065c 274A     		ldr	r2, .L114+40
 1155 065e 1368     		ldr	r3, [r2]
 1156              	.LVL63:
 1157 0660 A021     		mov	r1, #160
 1158 0662 0902     		lsl	r1, r1, #8
 1159 0664 0B43     		orr	r3, r1
 1160 0666 1360     		str	r3, [r2]
 1161 0668 08E0     		b	.L67
 1162              	.LVL64:
 1163              	.L71:
 680:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 }
 681:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 else
 682:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 {
 683:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     /* Stretch clock when RX FIFO becomes FULL */
 684:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     UART_ENABLE_SLAVE_AUTO_DATA_ACK;
 1164              		.loc 1 684 0
 1165 066a 244A     		ldr	r2, .L114+40
 1166 066c 1368     		ldr	r3, [r2]
 1167              	.LVL65:
 1168 066e 8021     		mov	r1, #128
 1169 0670 8901     		lsl	r1, r1, #6
 1170 0672 0B43     		orr	r3, r1
 1171 0674 1360     		str	r3, [r2]
 685:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                     UART_SetRxInterruptMode(UART_INTR_RX_FULL);
 1172              		.loc 1 685 0
 1173 0676 0822     		mov	r2, #8
 1174 0678 224B     		ldr	r3, .L114+48
 1175 067a 1A60     		str	r2, [r3]
 1176              	.L67:
 686:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                                 }
 687:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             }
 688:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 689:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 34


 690:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     #endif /* (UART_CY_SCBIP_V0) */
 691:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 692:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         /* Start master reading */
 693:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_slStatus |= (uint8) UART_I2C_SSTAT_WR_BUSY;
 1177              		.loc 1 693 0
 1178 067c 2B4A     		ldr	r2, .L114+88
 1179 067e 1178     		ldrb	r1, [r2]
 1180 0680 2023     		mov	r3, #32
 1181 0682 0B43     		orr	r3, r1
 1182 0684 1370     		strb	r3, [r2]
 694:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_state     = UART_I2C_FSM_SL_WR;
 1183              		.loc 1 694 0
 1184 0686 1122     		mov	r2, #17
 1185 0688 204B     		ldr	r3, .L114+56
 1186 068a 1A70     		strb	r2, [r3]
 1187              	.L65:
 695:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     }
 696:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 697:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* Clear address match and stop history */
 698:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_ClearSlaveInterruptSource(UART_INTR_SLAVE_ALL);
 1188              		.loc 1 698 0
 1189 068c 374A     		ldr	r2, .L114+152
 1190 068e 254B     		ldr	r3, .L114+80
 1191 0690 1A60     		str	r2, [r3]
 699:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 700:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 #if (!UART_CY_SCBIP_V0)
 701:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* Enable write stop interrupt source as it triggers after address was NACKed. 
 702:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_ENABLE_INTR_SLAVE(UART_INTR_SLAVE_I2C_WRITE_STOP);
 1192              		.loc 1 702 0
 1193 0692 354A     		ldr	r2, .L114+148
 1194 0694 1168     		ldr	r1, [r2]
 1195 0696 0823     		mov	r3, #8
 1196 0698 0B43     		orr	r3, r1
 1197 069a 1360     		str	r3, [r2]
 703:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 #endif /* (!UART_CY_SCBIP_V0) */
 704:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 705:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* ACK the address byte */
 706:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_I2C_SLAVE_GENERATE_ACK;
 1198              		.loc 1 706 0
 1199 069c 0122     		mov	r2, #1
 1200 069e 344B     		ldr	r3, .L114+156
 1201 06a0 1A60     		str	r2, [r3]
 1202              	.LVL66:
 1203              	.L58:
 707:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 708:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             }
 709:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 710:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             /* UART_INTR_RX_FULL:
 711:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * Get data from the RX FIFO and decide whether to ACK or NACK the following bytes
 712:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             */
 713:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             if(UART_CHECK_INTR_RX_MASKED(UART_INTR_RX_FULL))
 1204              		.loc 1 713 0
 1205 06a2 354B     		ldr	r3, .L114+164
 1206 06a4 1B68     		ldr	r3, [r3]
 1207 06a6 1B07     		lsl	r3, r3, #28
 1208 06a8 00D4     		bmi	.LCB1299
 1209 06aa 93E0     		b	.L72	@long jump
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 35


 1210              	.LCB1299:
 714:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             {
 715:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 /* Calculate available buffer size to take into account that RX FIFO is FULL */
 716:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 diffCount =  UART_slWrBufSize -
 1211              		.loc 1 716 0
 1212 06ac 314B     		ldr	r3, .L114+160
 1213 06ae 1A68     		ldr	r2, [r3]
 717:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             (UART_slWrBufIndex + UART_I2C_FIFO_SIZE);
 1214              		.loc 1 717 0
 1215 06b0 0F4B     		ldr	r3, .L114+28
 1216 06b2 1B68     		ldr	r3, [r3]
 1217 06b4 1B05     		lsl	r3, r3, #20
 1218 06b6 01D5     		bpl	.L106
 1219 06b8 1020     		mov	r0, #16
 1220 06ba 00E0     		b	.L73
 1221              	.L106:
 1222 06bc 0820     		mov	r0, #8
 1223              	.L73:
 1224              		.loc 1 717 0 is_stmt 0 discriminator 4
 1225 06be 2249     		ldr	r1, .L114+116
 1226 06c0 0B68     		ldr	r3, [r1]
 1227 06c2 C318     		add	r3, r0, r3
 716:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             (UART_slWrBufIndex + UART_I2C_FIFO_SIZE);
 1228              		.loc 1 716 0 is_stmt 1 discriminator 4
 1229 06c4 D01A     		sub	r0, r2, r3
 1230              	.LVL67:
 718:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 719:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 if(diffCount > UART_I2C_FIFO_SIZE) /* Proceed transaction */
 1231              		.loc 1 719 0 discriminator 4
 1232 06c6 0A4B     		ldr	r3, .L114+28
 1233 06c8 1B68     		ldr	r3, [r3]
 1234 06ca 1B05     		lsl	r3, r3, #20
 1235 06cc 56D5     		bpl	.L107
 1236              		.loc 1 719 0 is_stmt 0
 1237 06ce 1023     		mov	r3, #16
 1238 06d0 55E0     		b	.L74
 1239              	.L115:
 1240 06d2 C046     		.align	2
 1241              	.L114:
 1242 06d4 8C0F2440 		.word	1076105100
 1243 06d8 00000000 		.word	UART_mstrWrBufIndexTmp
 1244 06dc 00000000 		.word	UART_mstrWrBufSize
 1245 06e0 800F2440 		.word	1076105088
 1246 06e4 880F2440 		.word	1076105096
 1247 06e8 00000000 		.word	UART_mstrWrBufPtr
 1248 06ec 40022440 		.word	1076101696
 1249 06f0 00002440 		.word	1076101120
 1250 06f4 08022440 		.word	1076101640
 1251 06f8 00000000 		.word	UART_mstrWrBufIndex
 1252 06fc 60002440 		.word	1076101216
 1253 0700 FFFEFFFF 		.word	-257
 1254 0704 C80F2440 		.word	1076105160
 1255 0708 00000000 		.word	UART_mstrControl
 1256 070c 00000000 		.word	UART_state
 1257 0710 00000000 		.word	UART_mstrStatus
 1258 0714 64002440 		.word	1076101220
 1259 0718 68002440 		.word	1076101224
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 36


 1260 071c 00000000 		.word	UART_mode
 1261 0720 4C0F2440 		.word	1076105036
 1262 0724 400F2440 		.word	1076105024
 1263 0728 00000000 		.word	UART_slOverFlowCount
 1264 072c 00000000 		.word	UART_slStatus
 1265 0730 00000000 		.word	UART_slRdBufIndexTmp
 1266 0734 00000000 		.word	UART_slRdBufIndex
 1267 0738 04022440 		.word	1076101636
 1268 073c FFFFFEFF 		.word	-65537
 1269 0740 00000000 		.word	UART_acceptAddr
 1270 0744 08032440 		.word	1076101896
 1271 0748 00000000 		.word	UART_slWrBufIndex
 1272 074c 00000000 		.word	UART_slWrBufPtr
 1273 0750 40032440 		.word	1076101952
 1274 0754 FF5FFFFF 		.word	-40961
 1275 0758 C00F2440 		.word	1076105152
 1276 075c ED0F0000 		.word	4077
 1277 0760 800E2440 		.word	1076104832
 1278 0764 00000000 		.word	UART_customAddressHandler
 1279 0768 480F2440 		.word	1076105032
 1280 076c FF0F0000 		.word	4095
 1281 0770 6C002440 		.word	1076101228
 1282 0774 00000000 		.word	UART_slWrBufSize
 1283 0778 CC0F2440 		.word	1076105164
 1284              	.L107:
 1285 077c 0823     		mov	r3, #8
 1286              	.L74:
 1287              		.loc 1 719 0 discriminator 4
 1288 077e 8342     		cmp	r3, r0
 1289 0780 08D2     		bcs	.L108
 720:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 721:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     diffCount   = UART_I2C_FIFO_SIZE;
 1290              		.loc 1 721 0 is_stmt 1
 1291 0782 4D4B     		ldr	r3, .L116
 1292 0784 1B68     		ldr	r3, [r3]
 1293 0786 1B05     		lsl	r3, r3, #20
 1294 0788 01D5     		bpl	.L109
 1295 078a 1020     		mov	r0, #16
 1296              	.LVL68:
 1297 078c 00E0     		b	.L76
 1298              	.LVL69:
 1299              	.L109:
 1300 078e 0820     		mov	r0, #8
 1301              	.LVL70:
 1302              	.L76:
 722:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     endTransfer = 0u;  /* Continue active transfer */
 1303              		.loc 1 722 0 discriminator 4
 1304 0790 0024     		mov	r4, #0
 1305 0792 0EE0     		b	.L77
 1306              	.LVL71:
 1307              	.L108:
 723:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 724:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 else /* End when FIFO becomes FULL again */
 725:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 726:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     endTransfer = UART_I2C_CMPLT_ANY_TRANSFER;
 1308              		.loc 1 726 0
 1309 0794 0124     		mov	r4, #1
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 37


 1310 0796 0CE0     		b	.L77
 1311              	.LVL72:
 1312              	.L78:
 727:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 728:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 729:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 for(; (0u != diffCount); diffCount--)
 730:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 731:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* Put data in component buffer */
 732:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_slWrBufPtr[UART_slWrBufIndex] = (uint8) UART_RX_FIFO_RD_REG;
 1313              		.loc 1 732 0 discriminator 2
 1314 0798 484B     		ldr	r3, .L116+4
 1315 079a 1A68     		ldr	r2, [r3]
 1316 079c 4849     		ldr	r1, .L116+8
 1317 079e 0968     		ldr	r1, [r1]
 1318 07a0 8A18     		add	r2, r1, r2
 1319 07a2 4849     		ldr	r1, .L116+12
 1320 07a4 0968     		ldr	r1, [r1]
 1321 07a6 C9B2     		uxtb	r1, r1
 1322 07a8 1170     		strb	r1, [r2]
 733:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_slWrBufIndex++;
 1323              		.loc 1 733 0 discriminator 2
 1324 07aa 1A68     		ldr	r2, [r3]
 1325 07ac 0132     		add	r2, r2, #1
 1326 07ae 1A60     		str	r2, [r3]
 729:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 1327              		.loc 1 729 0 discriminator 2
 1328 07b0 0138     		sub	r0, r0, #1
 1329              	.LVL73:
 1330              	.L77:
 729:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 1331              		.loc 1 729 0 is_stmt 0 discriminator 1
 1332 07b2 0028     		cmp	r0, #0
 1333 07b4 F0D1     		bne	.L78
 734:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 735:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 736:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 if(0u != endTransfer) /* End transfer sending NACK */
 1334              		.loc 1 736 0 is_stmt 1
 1335 07b6 002C     		cmp	r4, #0
 1336 07b8 08D0     		beq	.L79
 737:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 738:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_ENABLE_SLAVE_AUTO_DATA_NACK;
 1337              		.loc 1 738 0
 1338 07ba 434A     		ldr	r2, .L116+16
 1339 07bc 1368     		ldr	r3, [r2]
 1340 07be 8021     		mov	r1, #128
 1341 07c0 0902     		lsl	r1, r1, #8
 1342 07c2 0B43     		orr	r3, r1
 1343 07c4 1360     		str	r3, [r2]
 739:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 740:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* INTR_RX_FULL triggers earlier than INTR_SLAVE_I2C_STOP:
 741:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     * disable all RX interrupt sources.
 742:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     */
 743:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_SetRxInterruptMode(UART_NO_INTR_SOURCES);
 1344              		.loc 1 743 0
 1345 07c6 0022     		mov	r2, #0
 1346 07c8 404B     		ldr	r3, .L116+20
 1347 07ca 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 38


 1348              	.L79:
 744:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 745:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 746:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_ClearRxInterruptSource(UART_INTR_RX_FULL);
 1349              		.loc 1 746 0
 1350 07cc 0822     		mov	r2, #8
 1351 07ce 404B     		ldr	r3, .L116+24
 1352 07d0 1A60     		str	r2, [r3]
 1353 07d2 24E0     		b	.L80
 1354              	.LVL74:
 1355              	.L72:
 747:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             }
 748:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             /* UART_INTR_RX_NOT_EMPTY:
 749:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * The buffer size is less than 8: it requires processing in byte-by-byte mode.
 750:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             */
 751:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             else if(UART_CHECK_INTR_RX_MASKED(UART_INTR_RX_NOT_EMPTY))
 1356              		.loc 1 751 0
 1357 07d4 3F4B     		ldr	r3, .L116+28
 1358 07d6 1B68     		ldr	r3, [r3]
 1359 07d8 5B07     		lsl	r3, r3, #29
 1360 07da 20D5     		bpl	.L80
 752:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             {
 753:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 diffCount = UART_RX_FIFO_RD_REG;
 1361              		.loc 1 753 0
 1362 07dc 394B     		ldr	r3, .L116+12
 1363 07de 1B68     		ldr	r3, [r3]
 1364              	.LVL75:
 754:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 755:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 if(UART_slWrBufIndex < UART_slWrBufSize)
 1365              		.loc 1 755 0
 1366 07e0 364A     		ldr	r2, .L116+4
 1367 07e2 1168     		ldr	r1, [r2]
 1368 07e4 3C4A     		ldr	r2, .L116+32
 1369 07e6 1268     		ldr	r2, [r2]
 1370 07e8 9142     		cmp	r1, r2
 1371 07ea 0DD2     		bcs	.L81
 756:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 757:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_I2C_SLAVE_GENERATE_ACK;
 1372              		.loc 1 757 0
 1373 07ec 0121     		mov	r1, #1
 1374 07ee 3B4A     		ldr	r2, .L116+36
 1375 07f0 1160     		str	r1, [r2]
 758:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 759:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* Put data into component buffer */
 760:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_slWrBufPtr[UART_slWrBufIndex] = (uint8) diffCount;
 1376              		.loc 1 760 0
 1377 07f2 324A     		ldr	r2, .L116+4
 1378 07f4 1168     		ldr	r1, [r2]
 1379 07f6 3248     		ldr	r0, .L116+8
 1380 07f8 0068     		ldr	r0, [r0]
 1381 07fa 4118     		add	r1, r0, r1
 1382 07fc DBB2     		uxtb	r3, r3
 1383              	.LVL76:
 1384 07fe 0B70     		strb	r3, [r1]
 761:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_slWrBufIndex++;
 1385              		.loc 1 761 0
 1386 0800 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 39


 1387 0802 0133     		add	r3, r3, #1
 1388 0804 1360     		str	r3, [r2]
 1389 0806 07E0     		b	.L82
 1390              	.LVL77:
 1391              	.L81:
 762:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 763:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 else /* Overflow: there is no space in write buffer */
 764:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 765:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_I2C_SLAVE_GENERATE_NACK;
 1392              		.loc 1 765 0
 1393 0808 0222     		mov	r2, #2
 1394 080a 344B     		ldr	r3, .L116+36
 1395              	.LVL78:
 1396 080c 1A60     		str	r2, [r3]
 766:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 767:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     UART_slStatus |= (uint8) UART_I2C_SSTAT_WR_OVFL;
 1397              		.loc 1 767 0
 1398 080e 344A     		ldr	r2, .L116+40
 1399 0810 1178     		ldrb	r1, [r2]
 1400 0812 4023     		mov	r3, #64
 1401 0814 0B43     		orr	r3, r1
 1402 0816 1370     		strb	r3, [r2]
 1403              	.L82:
 768:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 769:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 770:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_ClearRxInterruptSource(UART_INTR_RX_NOT_EMPTY);
 1404              		.loc 1 770 0
 1405 0818 0422     		mov	r2, #4
 1406 081a 2D4B     		ldr	r3, .L116+24
 1407 081c 1A60     		str	r2, [r3]
 1408              	.L80:
 771:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             }
 772:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             else
 773:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             {
 774:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 /* Does nothing */
 775:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             }
 776:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 777:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 778:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             /* UART_INTR_TX_EMPTY:
 779:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * The master reads the slave: provide data to read or 0xFF in the case of the end of th
 780:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * The overflow condition must be captured, but not set until the end of transaction.
 781:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             * There is a possibility of a false overflow due to TX FIFO utilization.
 782:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             */
 783:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             if(UART_CHECK_INTR_TX_MASKED(UART_INTR_TX_EMPTY))
 1409              		.loc 1 783 0
 1410 081e 314B     		ldr	r3, .L116+44
 1411 0820 1B68     		ldr	r3, [r3]
 1412 0822 DB06     		lsl	r3, r3, #27
 1413 0824 1FD4     		bmi	.L83
 1414 0826 45E0     		b	.L1
 1415              	.L87:
 784:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             {
 785:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 while(UART_I2C_FIFO_SIZE != UART_GET_TX_FIFO_ENTRIES)
 786:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 787:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* Temporary slRdBufIndexTmp is used because the master can NACK the byte and
 788:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     * index roll-back is required in this case. The slRdBufIndex is updated at the 
 789:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     * of the read transfer.
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 40


 790:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     */
 791:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     if(UART_slRdBufIndexTmp < UART_slRdBufSize)
 1416              		.loc 1 791 0
 1417 0828 2F4B     		ldr	r3, .L116+48
 1418 082a 1A68     		ldr	r2, [r3]
 1419 082c 2F4B     		ldr	r3, .L116+52
 1420 082e 1B68     		ldr	r3, [r3]
 1421 0830 9A42     		cmp	r2, r3
 1422 0832 0CD2     		bcs	.L84
 792:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* Data from buffer */
 793:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     {
 794:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_TX_FIFO_WR_REG = (uint32) UART_slRdBufPtr[UART_slRdBufIndexTmp];
 1423              		.loc 1 794 0
 1424 0834 2C4B     		ldr	r3, .L116+48
 1425 0836 1A68     		ldr	r2, [r3]
 1426 0838 2D49     		ldr	r1, .L116+56
 1427 083a 0968     		ldr	r1, [r1]
 1428 083c 8A18     		add	r2, r1, r2
 1429 083e 1278     		ldrb	r2, [r2]
 1430 0840 D2B2     		uxtb	r2, r2
 1431 0842 2C49     		ldr	r1, .L116+60
 1432 0844 0A60     		str	r2, [r1]
 795:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_slRdBufIndexTmp++;
 1433              		.loc 1 795 0
 1434 0846 1A68     		ldr	r2, [r3]
 1435 0848 0132     		add	r2, r2, #1
 1436 084a 1A60     		str	r2, [r3]
 1437 084c 0BE0     		b	.L83
 1438              	.L84:
 796:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     }
 797:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     else
 798:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     /* Probably Overflow */
 799:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     {
 800:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         UART_TX_FIFO_WR_REG = UART_I2C_SLAVE_OVFL_RETURN;
 1439              		.loc 1 800 0
 1440 084e FF22     		mov	r2, #255
 1441 0850 284B     		ldr	r3, .L116+60
 1442 0852 1A60     		str	r2, [r3]
 801:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 802:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         if(0u == (UART_INTR_TX_OVERFLOW & UART_slOverFlowCount))
 1443              		.loc 1 802 0
 1444 0854 284B     		ldr	r3, .L116+64
 1445 0856 1B78     		ldrb	r3, [r3]
 1446 0858 9B06     		lsl	r3, r3, #26
 1447 085a 04D4     		bmi	.L83
 803:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         {
 804:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             /* Get counter in range of byte: value 10 is overflow */
 805:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                             UART_slOverFlowCount++;
 1448              		.loc 1 805 0
 1449 085c 264A     		ldr	r2, .L116+64
 1450 085e 1378     		ldrb	r3, [r2]
 1451 0860 0133     		add	r3, r3, #1
 1452 0862 DBB2     		uxtb	r3, r3
 1453 0864 1370     		strb	r3, [r2]
 1454              	.L83:
 785:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 1455              		.loc 1 785 0
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 41


 1456 0866 144B     		ldr	r3, .L116
 1457 0868 1B68     		ldr	r3, [r3]
 1458 086a 1B05     		lsl	r3, r3, #20
 1459 086c 01D5     		bpl	.L110
 1460 086e 1022     		mov	r2, #16
 1461 0870 00E0     		b	.L86
 1462              	.L110:
 1463 0872 0822     		mov	r2, #8
 1464              	.L86:
 785:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 {
 1465              		.loc 1 785 0 is_stmt 0 discriminator 4
 1466 0874 214B     		ldr	r3, .L116+68
 1467 0876 1B68     		ldr	r3, [r3]
 1468 0878 1F21     		mov	r1, #31
 1469 087a 0B40     		and	r3, r1
 1470 087c 9A42     		cmp	r2, r3
 1471 087e D3D1     		bne	.L87
 806:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                         }
 807:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                     }
 808:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 }
 809:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 810:.\Generated_Source\PSoC4/UART_I2C_INT.c ****                 UART_ClearTxInterruptSource(UART_INTR_TX_EMPTY);
 1472              		.loc 1 810 0 is_stmt 1
 1473 0880 1022     		mov	r2, #16
 1474 0882 1F4B     		ldr	r3, .L116+72
 1475 0884 1A60     		str	r2, [r3]
 1476 0886 15E0     		b	.L1
 1477              	.LVL79:
 1478              	.L46:
 811:.\Generated_Source\PSoC4/UART_I2C_INT.c ****             }
 812:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 813:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         }  /* (UART_I2C_SLAVE) */
 814:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         
 815:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     }
 816:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 817:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 818:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     /* FSM EXIT:
 819:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     * Slave:  INTR_SLAVE_I2C_BUS_ERROR, INTR_SLAVE_I2C_ARB_LOST
 820:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     * Master: INTR_MASTER_I2C_BUS_ERROR, INTR_MASTER_I2C_ARB_LOST.
 821:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     */
 822:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     else
 823:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     {
 824:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         UART_CTRL_REG &= (uint32) ~UART_CTRL_ENABLED; /* Disable scb IP */
 1479              		.loc 1 824 0
 1480 0888 0B4A     		ldr	r2, .L116
 1481              	.LVL80:
 1482 088a 1368     		ldr	r3, [r2]
 1483 088c 5B00     		lsl	r3, r3, #1
 1484 088e 5B08     		lsr	r3, r3, #1
 1485 0890 1360     		str	r3, [r2]
 825:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 826:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         UART_state = UART_I2C_FSM_IDLE;
 1486              		.loc 1 826 0
 1487 0892 1021     		mov	r1, #16
 1488 0894 1B4B     		ldr	r3, .L116+76
 1489 0896 1970     		strb	r1, [r3]
 827:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 42


 828:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         UART_DISABLE_SLAVE_AUTO_DATA;
 1490              		.loc 1 828 0
 1491 0898 0B4B     		ldr	r3, .L116+16
 1492 089a 1868     		ldr	r0, [r3]
 1493 089c 1A49     		ldr	r1, .L116+80
 1494 089e 0140     		and	r1, r0
 1495 08a0 1960     		str	r1, [r3]
 829:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         UART_DISABLE_MASTER_AUTO_DATA;
 1496              		.loc 1 829 0
 1497 08a2 1868     		ldr	r0, [r3]
 1498 08a4 1949     		ldr	r1, .L116+84
 1499 08a6 0140     		and	r1, r0
 1500 08a8 1960     		str	r1, [r3]
 830:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 831:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     #if(UART_CY_SCBIP_V0)
 832:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         UART_SetRxInterruptMode(UART_NO_INTR_SOURCES);
 833:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         UART_SetTxInterruptMode(UART_NO_INTR_SOURCES);
 834:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 835:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         /* Clear interrupt sources as they are not automatically cleared after SCB is disabled */
 836:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         UART_ClearTxInterruptSource(UART_INTR_RX_ALL);
 837:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         UART_ClearRxInterruptSource(UART_INTR_TX_ALL);
 838:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         UART_ClearSlaveInterruptSource(UART_INTR_SLAVE_ALL);
 839:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         UART_ClearMasterInterruptSource(UART_INTR_MASTER_ALL);
 840:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     #endif /* (UART_CY_SCBIP_V0) */
 841:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 842:.\Generated_Source\PSoC4/UART_I2C_INT.c ****         UART_CTRL_REG |= (uint32) UART_CTRL_ENABLED;  /* Enable scb IP */
 1501              		.loc 1 842 0
 1502 08aa 1368     		ldr	r3, [r2]
 1503 08ac 8021     		mov	r1, #128
 1504 08ae 0906     		lsl	r1, r1, #24
 1505 08b0 0B43     		orr	r3, r1
 1506 08b2 1360     		str	r3, [r2]
 1507              	.LVL81:
 1508              	.L1:
 843:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     }
 844:.\Generated_Source\PSoC4/UART_I2C_INT.c **** 
 845:.\Generated_Source\PSoC4/UART_I2C_INT.c **** #ifdef UART_I2C_ISR_EXIT_CALLBACK
 846:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     UART_I2C_ISR_ExitCallback();
 847:.\Generated_Source\PSoC4/UART_I2C_INT.c **** #endif /* UART_I2C_ISR_EXIT_CALLBACK */
 848:.\Generated_Source\PSoC4/UART_I2C_INT.c ****     
 849:.\Generated_Source\PSoC4/UART_I2C_INT.c **** }
 1509              		.loc 1 849 0
 1510              		@ sp needed
 1511 08b4 10BD     		pop	{r4, pc}
 1512              	.L117:
 1513 08b6 C046     		.align	2
 1514              	.L116:
 1515 08b8 00002440 		.word	1076101120
 1516 08bc 00000000 		.word	UART_slWrBufIndex
 1517 08c0 00000000 		.word	UART_slWrBufPtr
 1518 08c4 40032440 		.word	1076101952
 1519 08c8 60002440 		.word	1076101216
 1520 08cc C80F2440 		.word	1076105160
 1521 08d0 C00F2440 		.word	1076105152
 1522 08d4 CC0F2440 		.word	1076105164
 1523 08d8 00000000 		.word	UART_slWrBufSize
 1524 08dc 6C002440 		.word	1076101228
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 43


 1525 08e0 00000000 		.word	UART_slStatus
 1526 08e4 8C0F2440 		.word	1076105100
 1527 08e8 00000000 		.word	UART_slRdBufIndexTmp
 1528 08ec 00000000 		.word	UART_slRdBufSize
 1529 08f0 00000000 		.word	UART_slRdBufPtr
 1530 08f4 40022440 		.word	1076101696
 1531 08f8 00000000 		.word	UART_slOverFlowCount
 1532 08fc 08022440 		.word	1076101640
 1533 0900 800F2440 		.word	1076105088
 1534 0904 00000000 		.word	UART_state
 1535 0908 FF5FFFFF 		.word	-40961
 1536 090c FFFCFFFF 		.word	-769
 1537              		.cfi_endproc
 1538              	.LFE2:
 1539              		.size	UART_I2C_ISR, .-UART_I2C_ISR
 1540              		.text
 1541              	.Letext0:
 1542              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 1543              		.file 3 ".\\Generated_Source\\PSoC4\\UART_PVT.h"
 1544              		.file 4 ".\\Generated_Source\\PSoC4\\UART_I2C_PVT.h"
 1545              		.section	.debug_info,"",%progbits
 1546              	.Ldebug_info0:
 1547 0000 24020000 		.4byte	0x224
 1548 0004 0400     		.2byte	0x4
 1549 0006 00000000 		.4byte	.Ldebug_abbrev0
 1550 000a 04       		.byte	0x4
 1551 000b 01       		.uleb128 0x1
 1552 000c 20020000 		.4byte	.LASF44
 1553 0010 01       		.byte	0x1
 1554 0011 FE000000 		.4byte	.LASF45
 1555 0015 F4020000 		.4byte	.LASF46
 1556 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1557 001d 00000000 		.4byte	0
 1558 0021 00000000 		.4byte	.Ldebug_line0
 1559 0025 02       		.uleb128 0x2
 1560 0026 01       		.byte	0x1
 1561 0027 06       		.byte	0x6
 1562 0028 7D030000 		.4byte	.LASF0
 1563 002c 02       		.uleb128 0x2
 1564 002d 01       		.byte	0x1
 1565 002e 08       		.byte	0x8
 1566 002f 9B000000 		.4byte	.LASF1
 1567 0033 02       		.uleb128 0x2
 1568 0034 02       		.byte	0x2
 1569 0035 05       		.byte	0x5
 1570 0036 DC020000 		.4byte	.LASF2
 1571 003a 02       		.uleb128 0x2
 1572 003b 02       		.byte	0x2
 1573 003c 07       		.byte	0x7
 1574 003d 4B000000 		.4byte	.LASF3
 1575 0041 02       		.uleb128 0x2
 1576 0042 04       		.byte	0x4
 1577 0043 05       		.byte	0x5
 1578 0044 E6020000 		.4byte	.LASF4
 1579 0048 02       		.uleb128 0x2
 1580 0049 04       		.byte	0x4
 1581 004a 07       		.byte	0x7
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 44


 1582 004b A9000000 		.4byte	.LASF5
 1583 004f 02       		.uleb128 0x2
 1584 0050 08       		.byte	0x8
 1585 0051 05       		.byte	0x5
 1586 0052 DA010000 		.4byte	.LASF6
 1587 0056 02       		.uleb128 0x2
 1588 0057 08       		.byte	0x8
 1589 0058 07       		.byte	0x7
 1590 0059 73010000 		.4byte	.LASF7
 1591 005d 03       		.uleb128 0x3
 1592 005e 04       		.byte	0x4
 1593 005f 05       		.byte	0x5
 1594 0060 696E7400 		.ascii	"int\000"
 1595 0064 02       		.uleb128 0x2
 1596 0065 04       		.byte	0x4
 1597 0066 07       		.byte	0x7
 1598 0067 4F010000 		.4byte	.LASF8
 1599 006b 04       		.uleb128 0x4
 1600 006c C5000000 		.4byte	.LASF9
 1601 0070 02       		.byte	0x2
 1602 0071 C2       		.byte	0xc2
 1603 0072 2C000000 		.4byte	0x2c
 1604 0076 04       		.uleb128 0x4
 1605 0077 26010000 		.4byte	.LASF10
 1606 007b 02       		.byte	0x2
 1607 007c C3       		.byte	0xc3
 1608 007d 3A000000 		.4byte	0x3a
 1609 0081 04       		.uleb128 0x4
 1610 0082 3E010000 		.4byte	.LASF11
 1611 0086 02       		.byte	0x2
 1612 0087 C4       		.byte	0xc4
 1613 0088 48000000 		.4byte	0x48
 1614 008c 02       		.uleb128 0x2
 1615 008d 04       		.byte	0x4
 1616 008e 04       		.byte	0x4
 1617 008f 95000000 		.4byte	.LASF12
 1618 0093 02       		.uleb128 0x2
 1619 0094 08       		.byte	0x8
 1620 0095 04       		.byte	0x4
 1621 0096 7E000000 		.4byte	.LASF13
 1622 009a 02       		.uleb128 0x2
 1623 009b 01       		.byte	0x1
 1624 009c 08       		.byte	0x8
 1625 009d EF020000 		.4byte	.LASF14
 1626 00a1 05       		.uleb128 0x5
 1627 00a2 6B000000 		.4byte	0x6b
 1628 00a6 05       		.uleb128 0x5
 1629 00a7 76000000 		.4byte	0x76
 1630 00ab 06       		.uleb128 0x6
 1631 00ac 10000000 		.4byte	.LASF15
 1632 00b0 02       		.byte	0x2
 1633 00b1 6E01     		.2byte	0x16e
 1634 00b3 B7000000 		.4byte	0xb7
 1635 00b7 05       		.uleb128 0x5
 1636 00b8 81000000 		.4byte	0x81
 1637 00bc 06       		.uleb128 0x6
 1638 00bd 9C010000 		.4byte	.LASF16
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 45


 1639 00c1 02       		.byte	0x2
 1640 00c2 7E01     		.2byte	0x17e
 1641 00c4 C8000000 		.4byte	0xc8
 1642 00c8 07       		.uleb128 0x7
 1643 00c9 04       		.byte	0x4
 1644 00ca CE000000 		.4byte	0xce
 1645 00ce 08       		.uleb128 0x8
 1646 00cf 02       		.uleb128 0x2
 1647 00d0 04       		.byte	0x4
 1648 00d1 07       		.byte	0x7
 1649 00d2 D1010000 		.4byte	.LASF17
 1650 00d6 09       		.uleb128 0x9
 1651 00d7 C4010000 		.4byte	.LASF47
 1652 00db 01       		.byte	0x1
 1653 00dc 25       		.byte	0x25
 1654 00dd 00000000 		.4byte	.LFB2
 1655 00e1 10090000 		.4byte	.LFE2-.LFB2
 1656 00e5 01       		.uleb128 0x1
 1657 00e6 9C       		.byte	0x9c
 1658 00e7 19010000 		.4byte	0x119
 1659 00eb 0A       		.uleb128 0xa
 1660 00ec BB000000 		.4byte	.LASF18
 1661 00f0 01       		.byte	0x1
 1662 00f1 27       		.byte	0x27
 1663 00f2 81000000 		.4byte	0x81
 1664 00f6 00000000 		.4byte	.LLST0
 1665 00fa 0A       		.uleb128 0xa
 1666 00fb 72000000 		.4byte	.LASF19
 1667 00ff 01       		.byte	0x1
 1668 0100 28       		.byte	0x28
 1669 0101 81000000 		.4byte	0x81
 1670 0105 BB000000 		.4byte	.LLST1
 1671 0109 0A       		.uleb128 0xa
 1672 010a A9010000 		.4byte	.LASF20
 1673 010e 01       		.byte	0x1
 1674 010f 2F       		.byte	0x2f
 1675 0110 81000000 		.4byte	0x81
 1676 0114 F8010000 		.4byte	.LLST2
 1677 0118 00       		.byte	0
 1678 0119 0B       		.uleb128 0xb
 1679 011a 16000000 		.4byte	.LASF21
 1680 011e 03       		.byte	0x3
 1681 011f 3A       		.byte	0x3a
 1682 0120 BC000000 		.4byte	0xbc
 1683 0124 0B       		.uleb128 0xb
 1684 0125 45010000 		.4byte	.LASF22
 1685 0129 03       		.byte	0x3
 1686 012a 47       		.byte	0x47
 1687 012b 6B000000 		.4byte	0x6b
 1688 012f 0B       		.uleb128 0xb
 1689 0130 00000000 		.4byte	.LASF23
 1690 0134 03       		.byte	0x3
 1691 0135 48       		.byte	0x48
 1692 0136 6B000000 		.4byte	0x6b
 1693 013a 0B       		.uleb128 0xb
 1694 013b 40000000 		.4byte	.LASF24
 1695 013f 04       		.byte	0x4
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 46


 1696 0140 1D       		.byte	0x1d
 1697 0141 A1000000 		.4byte	0xa1
 1698 0145 0B       		.uleb128 0xb
 1699 0146 89030000 		.4byte	.LASF25
 1700 014a 04       		.byte	0x4
 1701 014b 20       		.byte	0x20
 1702 014c A1000000 		.4byte	0xa1
 1703 0150 0B       		.uleb128 0xb
 1704 0151 DD000000 		.4byte	.LASF26
 1705 0155 04       		.byte	0x4
 1706 0156 23       		.byte	0x23
 1707 0157 5B010000 		.4byte	0x15b
 1708 015b 07       		.uleb128 0x7
 1709 015c 04       		.byte	0x4
 1710 015d A1000000 		.4byte	0xa1
 1711 0161 0B       		.uleb128 0xb
 1712 0162 6C030000 		.4byte	.LASF27
 1713 0166 04       		.byte	0x4
 1714 0167 24       		.byte	0x24
 1715 0168 B7000000 		.4byte	0xb7
 1716 016c 0B       		.uleb128 0xb
 1717 016d CB000000 		.4byte	.LASF28
 1718 0171 04       		.byte	0x4
 1719 0172 25       		.byte	0x25
 1720 0173 B7000000 		.4byte	0xb7
 1721 0177 0B       		.uleb128 0xb
 1722 0178 85000000 		.4byte	.LASF29
 1723 017c 04       		.byte	0x4
 1724 017d 28       		.byte	0x28
 1725 017e 5B010000 		.4byte	0x15b
 1726 0182 0B       		.uleb128 0xb
 1727 0183 2D010000 		.4byte	.LASF30
 1728 0187 04       		.byte	0x4
 1729 0188 29       		.byte	0x29
 1730 0189 B7000000 		.4byte	0xb7
 1731 018d 0B       		.uleb128 0xb
 1732 018e 8A010000 		.4byte	.LASF31
 1733 0192 04       		.byte	0x4
 1734 0193 2A       		.byte	0x2a
 1735 0194 B7000000 		.4byte	0xb7
 1736 0198 0B       		.uleb128 0xb
 1737 0199 0B020000 		.4byte	.LASF32
 1738 019d 04       		.byte	0x4
 1739 019e 2B       		.byte	0x2b
 1740 019f B7000000 		.4byte	0xb7
 1741 01a3 0B       		.uleb128 0xb
 1742 01a4 97030000 		.4byte	.LASF33
 1743 01a8 04       		.byte	0x4
 1744 01a9 2C       		.byte	0x2c
 1745 01aa A1000000 		.4byte	0xa1
 1746 01ae 0B       		.uleb128 0xb
 1747 01af E8010000 		.4byte	.LASF34
 1748 01b3 04       		.byte	0x4
 1749 01b4 30       		.byte	0x30
 1750 01b5 A6000000 		.4byte	0xa6
 1751 01b9 0B       		.uleb128 0xb
 1752 01ba ED000000 		.4byte	.LASF35
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 47


 1753 01be 04       		.byte	0x4
 1754 01bf 31       		.byte	0x31
 1755 01c0 A1000000 		.4byte	0xa1
 1756 01c4 0B       		.uleb128 0xb
 1757 01c5 B2010000 		.4byte	.LASF36
 1758 01c9 04       		.byte	0x4
 1759 01ca 34       		.byte	0x34
 1760 01cb 5B010000 		.4byte	0x15b
 1761 01cf 0B       		.uleb128 0xb
 1762 01d0 F8010000 		.4byte	.LASF37
 1763 01d4 04       		.byte	0x4
 1764 01d5 35       		.byte	0x35
 1765 01d6 B7000000 		.4byte	0xb7
 1766 01da 0B       		.uleb128 0xb
 1767 01db 5E000000 		.4byte	.LASF38
 1768 01df 04       		.byte	0x4
 1769 01e0 36       		.byte	0x36
 1770 01e1 B7000000 		.4byte	0xb7
 1771 01e5 0B       		.uleb128 0xb
 1772 01e6 AC030000 		.4byte	.LASF39
 1773 01ea 04       		.byte	0x4
 1774 01eb 39       		.byte	0x39
 1775 01ec 5B010000 		.4byte	0x15b
 1776 01f0 0B       		.uleb128 0xb
 1777 01f1 2D000000 		.4byte	.LASF40
 1778 01f5 04       		.byte	0x4
 1779 01f6 3A       		.byte	0x3a
 1780 01f7 B7000000 		.4byte	0xb7
 1781 01fb 0B       		.uleb128 0xb
 1782 01fc C8020000 		.4byte	.LASF41
 1783 0200 04       		.byte	0x4
 1784 0201 3B       		.byte	0x3b
 1785 0202 B7000000 		.4byte	0xb7
 1786 0206 0B       		.uleb128 0xb
 1787 0207 5C010000 		.4byte	.LASF42
 1788 020b 04       		.byte	0x4
 1789 020c 3C       		.byte	0x3c
 1790 020d B7000000 		.4byte	0xb7
 1791 0211 0C       		.uleb128 0xc
 1792 0212 81000000 		.4byte	0x81
 1793 0216 0B       		.uleb128 0xb
 1794 0217 AE020000 		.4byte	.LASF43
 1795 021b 04       		.byte	0x4
 1796 021c 40       		.byte	0x40
 1797 021d 21020000 		.4byte	0x221
 1798 0221 07       		.uleb128 0x7
 1799 0222 04       		.byte	0x4
 1800 0223 11020000 		.4byte	0x211
 1801 0227 00       		.byte	0
 1802              		.section	.debug_abbrev,"",%progbits
 1803              	.Ldebug_abbrev0:
 1804 0000 01       		.uleb128 0x1
 1805 0001 11       		.uleb128 0x11
 1806 0002 01       		.byte	0x1
 1807 0003 25       		.uleb128 0x25
 1808 0004 0E       		.uleb128 0xe
 1809 0005 13       		.uleb128 0x13
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 48


 1810 0006 0B       		.uleb128 0xb
 1811 0007 03       		.uleb128 0x3
 1812 0008 0E       		.uleb128 0xe
 1813 0009 1B       		.uleb128 0x1b
 1814 000a 0E       		.uleb128 0xe
 1815 000b 55       		.uleb128 0x55
 1816 000c 17       		.uleb128 0x17
 1817 000d 11       		.uleb128 0x11
 1818 000e 01       		.uleb128 0x1
 1819 000f 10       		.uleb128 0x10
 1820 0010 17       		.uleb128 0x17
 1821 0011 00       		.byte	0
 1822 0012 00       		.byte	0
 1823 0013 02       		.uleb128 0x2
 1824 0014 24       		.uleb128 0x24
 1825 0015 00       		.byte	0
 1826 0016 0B       		.uleb128 0xb
 1827 0017 0B       		.uleb128 0xb
 1828 0018 3E       		.uleb128 0x3e
 1829 0019 0B       		.uleb128 0xb
 1830 001a 03       		.uleb128 0x3
 1831 001b 0E       		.uleb128 0xe
 1832 001c 00       		.byte	0
 1833 001d 00       		.byte	0
 1834 001e 03       		.uleb128 0x3
 1835 001f 24       		.uleb128 0x24
 1836 0020 00       		.byte	0
 1837 0021 0B       		.uleb128 0xb
 1838 0022 0B       		.uleb128 0xb
 1839 0023 3E       		.uleb128 0x3e
 1840 0024 0B       		.uleb128 0xb
 1841 0025 03       		.uleb128 0x3
 1842 0026 08       		.uleb128 0x8
 1843 0027 00       		.byte	0
 1844 0028 00       		.byte	0
 1845 0029 04       		.uleb128 0x4
 1846 002a 16       		.uleb128 0x16
 1847 002b 00       		.byte	0
 1848 002c 03       		.uleb128 0x3
 1849 002d 0E       		.uleb128 0xe
 1850 002e 3A       		.uleb128 0x3a
 1851 002f 0B       		.uleb128 0xb
 1852 0030 3B       		.uleb128 0x3b
 1853 0031 0B       		.uleb128 0xb
 1854 0032 49       		.uleb128 0x49
 1855 0033 13       		.uleb128 0x13
 1856 0034 00       		.byte	0
 1857 0035 00       		.byte	0
 1858 0036 05       		.uleb128 0x5
 1859 0037 35       		.uleb128 0x35
 1860 0038 00       		.byte	0
 1861 0039 49       		.uleb128 0x49
 1862 003a 13       		.uleb128 0x13
 1863 003b 00       		.byte	0
 1864 003c 00       		.byte	0
 1865 003d 06       		.uleb128 0x6
 1866 003e 16       		.uleb128 0x16
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 49


 1867 003f 00       		.byte	0
 1868 0040 03       		.uleb128 0x3
 1869 0041 0E       		.uleb128 0xe
 1870 0042 3A       		.uleb128 0x3a
 1871 0043 0B       		.uleb128 0xb
 1872 0044 3B       		.uleb128 0x3b
 1873 0045 05       		.uleb128 0x5
 1874 0046 49       		.uleb128 0x49
 1875 0047 13       		.uleb128 0x13
 1876 0048 00       		.byte	0
 1877 0049 00       		.byte	0
 1878 004a 07       		.uleb128 0x7
 1879 004b 0F       		.uleb128 0xf
 1880 004c 00       		.byte	0
 1881 004d 0B       		.uleb128 0xb
 1882 004e 0B       		.uleb128 0xb
 1883 004f 49       		.uleb128 0x49
 1884 0050 13       		.uleb128 0x13
 1885 0051 00       		.byte	0
 1886 0052 00       		.byte	0
 1887 0053 08       		.uleb128 0x8
 1888 0054 15       		.uleb128 0x15
 1889 0055 00       		.byte	0
 1890 0056 27       		.uleb128 0x27
 1891 0057 19       		.uleb128 0x19
 1892 0058 00       		.byte	0
 1893 0059 00       		.byte	0
 1894 005a 09       		.uleb128 0x9
 1895 005b 2E       		.uleb128 0x2e
 1896 005c 01       		.byte	0x1
 1897 005d 3F       		.uleb128 0x3f
 1898 005e 19       		.uleb128 0x19
 1899 005f 03       		.uleb128 0x3
 1900 0060 0E       		.uleb128 0xe
 1901 0061 3A       		.uleb128 0x3a
 1902 0062 0B       		.uleb128 0xb
 1903 0063 3B       		.uleb128 0x3b
 1904 0064 0B       		.uleb128 0xb
 1905 0065 27       		.uleb128 0x27
 1906 0066 19       		.uleb128 0x19
 1907 0067 11       		.uleb128 0x11
 1908 0068 01       		.uleb128 0x1
 1909 0069 12       		.uleb128 0x12
 1910 006a 06       		.uleb128 0x6
 1911 006b 40       		.uleb128 0x40
 1912 006c 18       		.uleb128 0x18
 1913 006d 9642     		.uleb128 0x2116
 1914 006f 19       		.uleb128 0x19
 1915 0070 01       		.uleb128 0x1
 1916 0071 13       		.uleb128 0x13
 1917 0072 00       		.byte	0
 1918 0073 00       		.byte	0
 1919 0074 0A       		.uleb128 0xa
 1920 0075 34       		.uleb128 0x34
 1921 0076 00       		.byte	0
 1922 0077 03       		.uleb128 0x3
 1923 0078 0E       		.uleb128 0xe
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 50


 1924 0079 3A       		.uleb128 0x3a
 1925 007a 0B       		.uleb128 0xb
 1926 007b 3B       		.uleb128 0x3b
 1927 007c 0B       		.uleb128 0xb
 1928 007d 49       		.uleb128 0x49
 1929 007e 13       		.uleb128 0x13
 1930 007f 02       		.uleb128 0x2
 1931 0080 17       		.uleb128 0x17
 1932 0081 00       		.byte	0
 1933 0082 00       		.byte	0
 1934 0083 0B       		.uleb128 0xb
 1935 0084 34       		.uleb128 0x34
 1936 0085 00       		.byte	0
 1937 0086 03       		.uleb128 0x3
 1938 0087 0E       		.uleb128 0xe
 1939 0088 3A       		.uleb128 0x3a
 1940 0089 0B       		.uleb128 0xb
 1941 008a 3B       		.uleb128 0x3b
 1942 008b 0B       		.uleb128 0xb
 1943 008c 49       		.uleb128 0x49
 1944 008d 13       		.uleb128 0x13
 1945 008e 3F       		.uleb128 0x3f
 1946 008f 19       		.uleb128 0x19
 1947 0090 3C       		.uleb128 0x3c
 1948 0091 19       		.uleb128 0x19
 1949 0092 00       		.byte	0
 1950 0093 00       		.byte	0
 1951 0094 0C       		.uleb128 0xc
 1952 0095 15       		.uleb128 0x15
 1953 0096 00       		.byte	0
 1954 0097 27       		.uleb128 0x27
 1955 0098 19       		.uleb128 0x19
 1956 0099 49       		.uleb128 0x49
 1957 009a 13       		.uleb128 0x13
 1958 009b 00       		.byte	0
 1959 009c 00       		.byte	0
 1960 009d 00       		.byte	0
 1961              		.section	.debug_loc,"",%progbits
 1962              	.Ldebug_loc0:
 1963              	.LLST0:
 1964 0000 26020000 		.4byte	.LVL27
 1965 0004 42020000 		.4byte	.LVL28
 1966 0008 0100     		.2byte	0x1
 1967 000a 54       		.byte	0x54
 1968 000b 44020000 		.4byte	.LVL29
 1969 000f 46020000 		.4byte	.LVL30
 1970 0013 0100     		.2byte	0x1
 1971 0015 54       		.byte	0x54
 1972 0016 46020000 		.4byte	.LVL30
 1973 001a 48020000 		.4byte	.LVL31
 1974 001e 0200     		.2byte	0x2
 1975 0020 38       		.byte	0x38
 1976 0021 9F       		.byte	0x9f
 1977 0022 48020000 		.4byte	.LVL31
 1978 0026 60020000 		.4byte	.LVL33
 1979 002a 0100     		.2byte	0x1
 1980 002c 54       		.byte	0x54
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 51


 1981 002d 60020000 		.4byte	.LVL33
 1982 0031 62020000 		.4byte	.LVL34
 1983 0035 0300     		.2byte	0x3
 1984 0037 74       		.byte	0x74
 1985 0038 70       		.sleb128 -16
 1986 0039 9F       		.byte	0x9f
 1987 003a 62020000 		.4byte	.LVL34
 1988 003e 88020000 		.4byte	.LVL38
 1989 0042 0100     		.2byte	0x1
 1990 0044 54       		.byte	0x54
 1991 0045 9E040000 		.4byte	.LVL49
 1992 0049 AE040000 		.4byte	.LVL50
 1993 004d 0100     		.2byte	0x1
 1994 004f 53       		.byte	0x53
 1995 0050 B4040000 		.4byte	.LVL51
 1996 0054 BA040000 		.4byte	.LVL52
 1997 0058 0100     		.2byte	0x1
 1998 005a 53       		.byte	0x53
 1999 005b 20060000 		.4byte	.LVL58
 2000 005f 2C060000 		.4byte	.LVL59
 2001 0063 0100     		.2byte	0x1
 2002 0065 53       		.byte	0x53
 2003 0066 30060000 		.4byte	.LVL60
 2004 006a 46060000 		.4byte	.LVL61
 2005 006e 0100     		.2byte	0x1
 2006 0070 53       		.byte	0x53
 2007 0071 4A060000 		.4byte	.LVL62
 2008 0075 60060000 		.4byte	.LVL63
 2009 0079 0100     		.2byte	0x1
 2010 007b 53       		.byte	0x53
 2011 007c 6A060000 		.4byte	.LVL64
 2012 0080 6E060000 		.4byte	.LVL65
 2013 0084 0100     		.2byte	0x1
 2014 0086 53       		.byte	0x53
 2015 0087 C6060000 		.4byte	.LVL67
 2016 008b 8C070000 		.4byte	.LVL68
 2017 008f 0100     		.2byte	0x1
 2018 0091 50       		.byte	0x50
 2019 0092 8E070000 		.4byte	.LVL69
 2020 0096 D4070000 		.4byte	.LVL74
 2021 009a 0100     		.2byte	0x1
 2022 009c 50       		.byte	0x50
 2023 009d E0070000 		.4byte	.LVL75
 2024 00a1 FE070000 		.4byte	.LVL76
 2025 00a5 0100     		.2byte	0x1
 2026 00a7 53       		.byte	0x53
 2027 00a8 08080000 		.4byte	.LVL77
 2028 00ac 0C080000 		.4byte	.LVL78
 2029 00b0 0100     		.2byte	0x1
 2030 00b2 53       		.byte	0x53
 2031 00b3 00000000 		.4byte	0
 2032 00b7 00000000 		.4byte	0
 2033              	.LLST1:
 2034 00bb 02000000 		.4byte	.LVL0
 2035 00bf 40000000 		.4byte	.LVL2
 2036 00c3 0200     		.2byte	0x2
 2037 00c5 30       		.byte	0x30
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 52


 2038 00c6 9F       		.byte	0x9f
 2039 00c7 40000000 		.4byte	.LVL2
 2040 00cb 44000000 		.4byte	.LVL3
 2041 00cf 0200     		.2byte	0x2
 2042 00d1 31       		.byte	0x31
 2043 00d2 9F       		.byte	0x9f
 2044 00d3 44000000 		.4byte	.LVL3
 2045 00d7 46000000 		.4byte	.LVL4
 2046 00db 0200     		.2byte	0x2
 2047 00dd 30       		.byte	0x30
 2048 00de 9F       		.byte	0x9f
 2049 00df 46000000 		.4byte	.LVL4
 2050 00e3 54000000 		.4byte	.LVL5
 2051 00e7 0100     		.2byte	0x1
 2052 00e9 52       		.byte	0x52
 2053 00ea 5A000000 		.4byte	.LVL6
 2054 00ee 5C000000 		.4byte	.LVL7
 2055 00f2 0200     		.2byte	0x2
 2056 00f4 31       		.byte	0x31
 2057 00f5 9F       		.byte	0x9f
 2058 00f6 5C000000 		.4byte	.LVL7
 2059 00fa 6E000000 		.4byte	.LVL8
 2060 00fe 0100     		.2byte	0x1
 2061 0100 52       		.byte	0x52
 2062 0101 74000000 		.4byte	.LVL9
 2063 0105 76000000 		.4byte	.LVL10
 2064 0109 0200     		.2byte	0x2
 2065 010b 31       		.byte	0x31
 2066 010c 9F       		.byte	0x9f
 2067 010d 76000000 		.4byte	.LVL10
 2068 0111 A6000000 		.4byte	.LVL11
 2069 0115 0100     		.2byte	0x1
 2070 0117 52       		.byte	0x52
 2071 0118 AA000000 		.4byte	.LVL12
 2072 011c AE000000 		.4byte	.LVL13
 2073 0120 0200     		.2byte	0x2
 2074 0122 31       		.byte	0x31
 2075 0123 9F       		.byte	0x9f
 2076 0124 AE000000 		.4byte	.LVL13
 2077 0128 C0000000 		.4byte	.LVL14
 2078 012c 0100     		.2byte	0x1
 2079 012e 52       		.byte	0x52
 2080 012f C2000000 		.4byte	.LVL15
 2081 0133 C4000000 		.4byte	.LVL16
 2082 0137 0100     		.2byte	0x1
 2083 0139 52       		.byte	0x52
 2084 013a C6000000 		.4byte	.LVL17
 2085 013e 1A010000 		.4byte	.LVL19
 2086 0142 0100     		.2byte	0x1
 2087 0144 52       		.byte	0x52
 2088 0145 1A010000 		.4byte	.LVL19
 2089 0149 6E010000 		.4byte	.LVL20
 2090 014d 0200     		.2byte	0x2
 2091 014f 30       		.byte	0x30
 2092 0150 9F       		.byte	0x9f
 2093 0151 6E010000 		.4byte	.LVL20
 2094 0155 8C010000 		.4byte	.LVL21
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 53


 2095 0159 0100     		.2byte	0x1
 2096 015b 52       		.byte	0x52
 2097 015c AE010000 		.4byte	.LVL22
 2098 0160 C0010000 		.4byte	.LVL23
 2099 0164 0100     		.2byte	0x1
 2100 0166 52       		.byte	0x52
 2101 0167 D0010000 		.4byte	.LVL24
 2102 016b D4010000 		.4byte	.LVL25
 2103 016f 0200     		.2byte	0x2
 2104 0171 31       		.byte	0x31
 2105 0172 9F       		.byte	0x9f
 2106 0173 D4010000 		.4byte	.LVL25
 2107 0177 4E020000 		.4byte	.LVL32
 2108 017b 0100     		.2byte	0x1
 2109 017d 52       		.byte	0x52
 2110 017e 64020000 		.4byte	.LVL35
 2111 0182 68020000 		.4byte	.LVL36
 2112 0186 0200     		.2byte	0x2
 2113 0188 31       		.byte	0x31
 2114 0189 9F       		.byte	0x9f
 2115 018a 68020000 		.4byte	.LVL36
 2116 018e CE020000 		.4byte	.LVL40
 2117 0192 0100     		.2byte	0x1
 2118 0194 52       		.byte	0x52
 2119 0195 16030000 		.4byte	.LVL41
 2120 0199 98030000 		.4byte	.LVL42
 2121 019d 0200     		.2byte	0x2
 2122 019f 31       		.byte	0x31
 2123 01a0 9F       		.byte	0x9f
 2124 01a1 98030000 		.4byte	.LVL42
 2125 01a5 0C040000 		.4byte	.LVL43
 2126 01a9 0100     		.2byte	0x1
 2127 01ab 52       		.byte	0x52
 2128 01ac 10040000 		.4byte	.LVL44
 2129 01b0 12040000 		.4byte	.LVL45
 2130 01b4 0200     		.2byte	0x2
 2131 01b6 31       		.byte	0x31
 2132 01b7 9F       		.byte	0x9f
 2133 01b8 12040000 		.4byte	.LVL45
 2134 01bc 1A040000 		.4byte	.LVL46
 2135 01c0 0100     		.2byte	0x1
 2136 01c2 52       		.byte	0x52
 2137 01c3 66040000 		.4byte	.LVL47
 2138 01c7 84040000 		.4byte	.LVL48
 2139 01cb 0100     		.2byte	0x1
 2140 01cd 52       		.byte	0x52
 2141 01ce 90070000 		.4byte	.LVL70
 2142 01d2 94070000 		.4byte	.LVL71
 2143 01d6 0200     		.2byte	0x2
 2144 01d8 30       		.byte	0x30
 2145 01d9 9F       		.byte	0x9f
 2146 01da 98070000 		.4byte	.LVL72
 2147 01de D4070000 		.4byte	.LVL74
 2148 01e2 0100     		.2byte	0x1
 2149 01e4 54       		.byte	0x54
 2150 01e5 88080000 		.4byte	.LVL79
 2151 01e9 8A080000 		.4byte	.LVL80
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 54


 2152 01ed 0100     		.2byte	0x1
 2153 01ef 52       		.byte	0x52
 2154 01f0 00000000 		.4byte	0
 2155 01f4 00000000 		.4byte	0
 2156              	.LLST2:
 2157 01f8 02000000 		.4byte	.LVL0
 2158 01fc C0050000 		.4byte	.LVL53
 2159 0200 0200     		.2byte	0x2
 2160 0202 30       		.byte	0x30
 2161 0203 9F       		.byte	0x9f
 2162 0204 C0050000 		.4byte	.LVL53
 2163 0208 C2050000 		.4byte	.LVL54
 2164 020c 0100     		.2byte	0x1
 2165 020e 50       		.byte	0x50
 2166 020f C2050000 		.4byte	.LVL54
 2167 0213 C8050000 		.4byte	.LVL55
 2168 0217 0200     		.2byte	0x2
 2169 0219 30       		.byte	0x30
 2170 021a 9F       		.byte	0x9f
 2171 021b C8050000 		.4byte	.LVL55
 2172 021f D0050000 		.4byte	.LVL56
 2173 0223 0100     		.2byte	0x1
 2174 0225 50       		.byte	0x50
 2175 0226 D0050000 		.4byte	.LVL56
 2176 022a D2050000 		.4byte	.LVL57
 2177 022e 0200     		.2byte	0x2
 2178 0230 30       		.byte	0x30
 2179 0231 9F       		.byte	0x9f
 2180 0232 D2050000 		.4byte	.LVL57
 2181 0236 A2060000 		.4byte	.LVL66
 2182 023a 0100     		.2byte	0x1
 2183 023c 50       		.byte	0x50
 2184 023d 88080000 		.4byte	.LVL79
 2185 0241 B4080000 		.4byte	.LVL81
 2186 0245 0200     		.2byte	0x2
 2187 0247 30       		.byte	0x30
 2188 0248 9F       		.byte	0x9f
 2189 0249 00000000 		.4byte	0
 2190 024d 00000000 		.4byte	0
 2191              		.section	.debug_aranges,"",%progbits
 2192 0000 1C000000 		.4byte	0x1c
 2193 0004 0200     		.2byte	0x2
 2194 0006 00000000 		.4byte	.Ldebug_info0
 2195 000a 04       		.byte	0x4
 2196 000b 00       		.byte	0
 2197 000c 0000     		.2byte	0
 2198 000e 0000     		.2byte	0
 2199 0010 00000000 		.4byte	.LFB2
 2200 0014 10090000 		.4byte	.LFE2-.LFB2
 2201 0018 00000000 		.4byte	0
 2202 001c 00000000 		.4byte	0
 2203              		.section	.debug_ranges,"",%progbits
 2204              	.Ldebug_ranges0:
 2205 0000 00000000 		.4byte	.LFB2
 2206 0004 10090000 		.4byte	.LFE2
 2207 0008 00000000 		.4byte	0
 2208 000c 00000000 		.4byte	0
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 55


 2209              		.section	.debug_line,"",%progbits
 2210              	.Ldebug_line0:
 2211 0000 7F020000 		.section	.debug_str,"MS",%progbits,1
 2211      02008200 
 2211      00000201 
 2211      FB0E0D00 
 2211      01010101 
 2212              	.LASF23:
 2213 0000 55415254 		.ascii	"UART_acceptAddr\000"
 2213      5F616363 
 2213      65707441 
 2213      64647200 
 2214              	.LASF15:
 2215 0010 72656733 		.ascii	"reg32\000"
 2215      3200
 2216              	.LASF21:
 2217 0016 55415254 		.ascii	"UART_customIntrHandler\000"
 2217      5F637573 
 2217      746F6D49 
 2217      6E747248 
 2217      616E646C 
 2218              	.LASF40:
 2219 002d 55415254 		.ascii	"UART_mstrWrBufSize\000"
 2219      5F6D7374 
 2219      72577242 
 2219      75665369 
 2219      7A6500
 2220              	.LASF24:
 2221 0040 55415254 		.ascii	"UART_state\000"
 2221      5F737461 
 2221      746500
 2222              	.LASF3:
 2223 004b 73686F72 		.ascii	"short unsigned int\000"
 2223      7420756E 
 2223      7369676E 
 2223      65642069 
 2223      6E7400
 2224              	.LASF38:
 2225 005e 55415254 		.ascii	"UART_mstrRdBufIndex\000"
 2225      5F6D7374 
 2225      72526442 
 2225      7566496E 
 2225      64657800 
 2226              	.LASF19:
 2227 0072 656E6454 		.ascii	"endTransfer\000"
 2227      72616E73 
 2227      66657200 
 2228              	.LASF13:
 2229 007e 646F7562 		.ascii	"double\000"
 2229      6C6500
 2230              	.LASF29:
 2231 0085 55415254 		.ascii	"UART_slRdBufPtr\000"
 2231      5F736C52 
 2231      64427566 
 2231      50747200 
 2232              	.LASF12:
 2233 0095 666C6F61 		.ascii	"float\000"
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 56


 2233      7400
 2234              	.LASF1:
 2235 009b 756E7369 		.ascii	"unsigned char\000"
 2235      676E6564 
 2235      20636861 
 2235      7200
 2236              	.LASF5:
 2237 00a9 6C6F6E67 		.ascii	"long unsigned int\000"
 2237      20756E73 
 2237      69676E65 
 2237      6420696E 
 2237      7400
 2238              	.LASF18:
 2239 00bb 64696666 		.ascii	"diffCount\000"
 2239      436F756E 
 2239      7400
 2240              	.LASF9:
 2241 00c5 75696E74 		.ascii	"uint8\000"
 2241      3800
 2242              	.LASF28:
 2243 00cb 55415254 		.ascii	"UART_slWrBufIndex\000"
 2243      5F736C57 
 2243      72427566 
 2243      496E6465 
 2243      7800
 2244              	.LASF26:
 2245 00dd 55415254 		.ascii	"UART_slWrBufPtr\000"
 2245      5F736C57 
 2245      72427566 
 2245      50747200 
 2246              	.LASF35:
 2247 00ed 55415254 		.ascii	"UART_mstrControl\000"
 2247      5F6D7374 
 2247      72436F6E 
 2247      74726F6C 
 2247      00
 2248              	.LASF45:
 2249 00fe 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\UART_I2C_INT.c\000"
 2249      6E657261 
 2249      7465645F 
 2249      536F7572 
 2249      63655C50 
 2250              	.LASF10:
 2251 0126 75696E74 		.ascii	"uint16\000"
 2251      313600
 2252              	.LASF30:
 2253 012d 55415254 		.ascii	"UART_slRdBufSize\000"
 2253      5F736C52 
 2253      64427566 
 2253      53697A65 
 2253      00
 2254              	.LASF11:
 2255 013e 75696E74 		.ascii	"uint32\000"
 2255      333200
 2256              	.LASF22:
 2257 0145 55415254 		.ascii	"UART_mode\000"
 2257      5F6D6F64 
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 57


 2257      6500
 2258              	.LASF8:
 2259 014f 756E7369 		.ascii	"unsigned int\000"
 2259      676E6564 
 2259      20696E74 
 2259      00
 2260              	.LASF42:
 2261 015c 55415254 		.ascii	"UART_mstrWrBufIndexTmp\000"
 2261      5F6D7374 
 2261      72577242 
 2261      7566496E 
 2261      64657854 
 2262              	.LASF7:
 2263 0173 6C6F6E67 		.ascii	"long long unsigned int\000"
 2263      206C6F6E 
 2263      6720756E 
 2263      7369676E 
 2263      65642069 
 2264              	.LASF31:
 2265 018a 55415254 		.ascii	"UART_slRdBufIndex\000"
 2265      5F736C52 
 2265      64427566 
 2265      496E6465 
 2265      7800
 2266              	.LASF16:
 2267 019c 63796973 		.ascii	"cyisraddress\000"
 2267      72616464 
 2267      72657373 
 2267      00
 2268              	.LASF20:
 2269 01a9 72657370 		.ascii	"response\000"
 2269      6F6E7365 
 2269      00
 2270              	.LASF36:
 2271 01b2 55415254 		.ascii	"UART_mstrRdBufPtr\000"
 2271      5F6D7374 
 2271      72526442 
 2271      75665074 
 2271      7200
 2272              	.LASF47:
 2273 01c4 55415254 		.ascii	"UART_I2C_ISR\000"
 2273      5F493243 
 2273      5F495352 
 2273      00
 2274              	.LASF17:
 2275 01d1 73697A65 		.ascii	"sizetype\000"
 2275      74797065 
 2275      00
 2276              	.LASF6:
 2277 01da 6C6F6E67 		.ascii	"long long int\000"
 2277      206C6F6E 
 2277      6720696E 
 2277      7400
 2278              	.LASF34:
 2279 01e8 55415254 		.ascii	"UART_mstrStatus\000"
 2279      5F6D7374 
 2279      72537461 
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 58


 2279      74757300 
 2280              	.LASF37:
 2281 01f8 55415254 		.ascii	"UART_mstrRdBufSize\000"
 2281      5F6D7374 
 2281      72526442 
 2281      75665369 
 2281      7A6500
 2282              	.LASF32:
 2283 020b 55415254 		.ascii	"UART_slRdBufIndexTmp\000"
 2283      5F736C52 
 2283      64427566 
 2283      496E6465 
 2283      78546D70 
 2284              	.LASF44:
 2285 0220 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2285      4320342E 
 2285      392E3320 
 2285      32303135 
 2285      30333033 
 2286 0253 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2286      20726576 
 2286      6973696F 
 2286      6E203232 
 2286      31323230 
 2287 0286 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 2287      66756E63 
 2287      74696F6E 
 2287      2D736563 
 2287      74696F6E 
 2288              	.LASF43:
 2289 02ae 55415254 		.ascii	"UART_customAddressHandler\000"
 2289      5F637573 
 2289      746F6D41 
 2289      64647265 
 2289      73734861 
 2290              	.LASF41:
 2291 02c8 55415254 		.ascii	"UART_mstrWrBufIndex\000"
 2291      5F6D7374 
 2291      72577242 
 2291      7566496E 
 2291      64657800 
 2292              	.LASF2:
 2293 02dc 73686F72 		.ascii	"short int\000"
 2293      7420696E 
 2293      7400
 2294              	.LASF4:
 2295 02e6 6C6F6E67 		.ascii	"long int\000"
 2295      20696E74 
 2295      00
 2296              	.LASF14:
 2297 02ef 63686172 		.ascii	"char\000"
 2297      00
 2298              	.LASF46:
 2299 02f4 473A5C43 		.ascii	"G:\\Company\\Jetronic\\CYPRESS\\CYPRESS_BLE_Study\\"
 2299      6F6D7061 
 2299      6E795C4A 
 2299      6574726F 
ARM GAS  C:\Users\Helon\AppData\Local\Temp\cchjHNLt.s 			page 59


 2299      6E69635C 
 2300 0322 54726F75 		.ascii	"Troughput\\Troughpur_Central_Peripheral\\Troughput_"
 2300      67687075 
 2300      745C5472 
 2300      6F756768 
 2300      7075725F 
 2301 0353 43656E74 		.ascii	"Central_Peripheral.cydsn\000"
 2301      72616C5F 
 2301      50657269 
 2301      70686572 
 2301      616C2E63 
 2302              	.LASF27:
 2303 036c 55415254 		.ascii	"UART_slWrBufSize\000"
 2303      5F736C57 
 2303      72427566 
 2303      53697A65 
 2303      00
 2304              	.LASF0:
 2305 037d 7369676E 		.ascii	"signed char\000"
 2305      65642063 
 2305      68617200 
 2306              	.LASF25:
 2307 0389 55415254 		.ascii	"UART_slStatus\000"
 2307      5F736C53 
 2307      74617475 
 2307      7300
 2308              	.LASF33:
 2309 0397 55415254 		.ascii	"UART_slOverFlowCount\000"
 2309      5F736C4F 
 2309      76657246 
 2309      6C6F7743 
 2309      6F756E74 
 2310              	.LASF39:
 2311 03ac 55415254 		.ascii	"UART_mstrWrBufPtr\000"
 2311      5F6D7374 
 2311      72577242 
 2311      75665074 
 2311      7200
 2312              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
